"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[620],{2312:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"move/modules","title":"Move Modules - Understanding Modular Programming","description":"Learn how to organize Move code into modules, control visibility with public and friend functions, and build scalable blockchain applications with proper separation of concerns.","source":"@site/docs/move/modules.md","sourceDirName":"move","slug":"/move/modules","permalink":"/move/modules","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/move/modules.md","tags":[],"version":"current","frontMatter":{"title":"Move Modules - Understanding Modular Programming","sidebar_label":"Move Modules","description":"Learn how to organize Move code into modules, control visibility with public and friend functions, and build scalable blockchain applications with proper separation of concerns.","keywords":["move modules","modular programming","visibility control","friend functions","code organization","blockchain architecture"]},"sidebar":"docs","previous":{"title":"Basic Syntax and Data Types","permalink":"/move/basics"},"next":{"title":"Functions in Move","permalink":"/move/functions"}}');var t=i(4848),r=i(8453);const a={title:"Move Modules - Understanding Modular Programming",sidebar_label:"Move Modules",description:"Learn how to organize Move code into modules, control visibility with public and friend functions, and build scalable blockchain applications with proper separation of concerns.",keywords:["move modules","modular programming","visibility control","friend functions","code organization","blockchain architecture"]},o="Move Modules: Understanding Modular Programming",l={},d=[{value:"Understanding Module Addresses",id:"understanding-module-addresses",level:2},{value:"The Address System",id:"the-address-system",level:3},{value:"Named Addresses for Development",id:"named-addresses-for-development",level:3},{value:"Module Anatomy: Structure and Organization",id:"module-anatomy-structure-and-organization",level:2},{value:"Imports: Building on Other Modules",id:"imports-building-on-other-modules",level:3},{value:"Constants: Configuration at Compile Time",id:"constants-configuration-at-compile-time",level:3},{value:"Structs: Defining Your Data",id:"structs-defining-your-data",level:3},{value:"Visibility Control: The Heart of Module Security",id:"visibility-control-the-heart-of-module-security",level:2},{value:"Private by Default",id:"private-by-default",level:3},{value:"Public Functions: Your Module&#39;s API",id:"public-functions-your-modules-api",level:3},{value:"Entry Functions: Transaction Entry Points",id:"entry-functions-transaction-entry-points",level:3},{value:"Friend Functions: Trusted Partnerships",id:"friend-functions-trusted-partnerships",level:3},{value:"Building Modular Applications",id:"building-modular-applications",level:2},{value:"Single Responsibility Principle",id:"single-responsibility-principle",level:3},{value:"Interface Design Between Modules",id:"interface-design-between-modules",level:3},{value:"Common Module Patterns",id:"common-module-patterns",level:2},{value:"The Registry Pattern",id:"the-registry-pattern",level:3},{value:"The Capability Pattern",id:"the-capability-pattern",level:3},{value:"Testing Your Modules",id:"testing-your-modules",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"move-modules-understanding-modular-programming",children:"Move Modules: Understanding Modular Programming"})}),"\n",(0,t.jsx)(n.p,{children:"Modules in Move are the fundamental unit of code organization. Think of them as containers that group related functionality, similar to classes in object-oriented languages or modules in Rust. However, Move modules have some unique characteristics designed specifically for blockchain development."}),"\n",(0,t.jsx)(n.p,{children:"The key difference? Once deployed to the blockchain, modules become immutable code libraries. This immutability is a feature, not a limitation \u2013 it ensures that the rules governing digital assets can't be changed after deployment."}),"\n",(0,t.jsx)(n.p,{children:"Here's the simplest possible module:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'module 0x42::hello {\n    public fun say_hello(): vector<u8> {\n        b"Hello, Move!"\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This module lives at address ",(0,t.jsx)(n.code,{children:"0x42"}),", is named ",(0,t.jsx)(n.code,{children:"hello"}),", and contains a single function. Once deployed, anyone can call ",(0,t.jsx)(n.code,{children:"0x42::hello::say_hello()"})," and it will always return the same greeting. The code can't be modified, deleted, or censored."]}),"\n",(0,t.jsx)(n.h2,{id:"understanding-module-addresses",children:"Understanding Module Addresses"}),"\n",(0,t.jsx)(n.p,{children:"Every module in Move has an address \u2013 a permanent home on the blockchain. This address system serves multiple purposes that are crucial to understanding Move development."}),"\n",(0,t.jsx)(n.h3,{id:"the-address-system",children:"The Address System"}),"\n",(0,t.jsxs)(n.p,{children:["When you write ",(0,t.jsx)(n.code,{children:"module 0x42::bank"}),", you're declaring that this module will live at address ",(0,t.jsx)(n.code,{children:"0x42"})," with the name ",(0,t.jsx)(n.code,{children:"bank"}),". This creates a globally unique identifier: ",(0,t.jsx)(n.code,{children:"0x42::bank"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module 0x42::bank {\n    // Module contents\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"But why do modules need addresses? Three key reasons:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Namespace Isolation"}),": Two different addresses can have modules with the same name without conflict"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Access Control"}),": The address owner controls what gets deployed there"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Permanent Identity"}),": Once deployed, the module is forever associated with that address"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"named-addresses-for-development",children:"Named Addresses for Development"}),"\n",(0,t.jsx)(n.p,{children:"During development, you'll use named addresses for flexibility:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'# In Move.toml\n[addresses]\nmarketplace = "0x123"\ntokens = "0x456"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now you can write more readable code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module marketplace::trading {\n    use tokens::nft::NFT;\n    // Your code here\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"When you deploy, these named addresses get replaced with actual blockchain addresses. This system lets you develop locally with one set of addresses and deploy to mainnet with another, without changing your code."}),"\n",(0,t.jsx)(n.admonition,{title:"Deployment Tip",type:"info",children:(0,t.jsx)(n.p,{children:"Always use named addresses during development. It makes your code portable across different networks (testnet, mainnet) and easier to read. The actual addresses are configured in Move.toml, not hardcoded in your modules."})}),"\n",(0,t.jsx)(n.h2,{id:"module-anatomy-structure-and-organization",children:"Module Anatomy: Structure and Organization"}),"\n",(0,t.jsx)(n.p,{children:"A well-organized module follows a consistent structure that makes it easy to understand and maintain. Let's explore each section and why it matters."}),"\n",(0,t.jsx)(n.h3,{id:"imports-building-on-other-modules",children:"Imports: Building on Other Modules"}),"\n",(0,t.jsxs)(n.p,{children:["Modules rarely exist in isolation. The ",(0,t.jsx)(n.code,{children:"use"})," statement lets you access functionality from other modules:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module marketplace::auction {\n    use std::vector;\n    use std::signer;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Each import serves a specific purpose:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"std::vector"})," - For working with dynamic arrays"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"std::signer"})," - For handling transaction authorization"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Move's import system is explicit \u2013 you only get access to what you specifically import. This makes dependencies clear and prevents namespace pollution."}),"\n",(0,t.jsx)(n.h3,{id:"constants-configuration-at-compile-time",children:"Constants: Configuration at Compile Time"}),"\n",(0,t.jsx)(n.p,{children:"Constants define values that never change. They're perfect for configuration and error codes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module marketplace::config {\n    const MAX_FEE_PERCENTAGE: u8 = 10;\n    const MIN_LISTING_PRICE: u64 = 100;\n    \n    const ERROR_PRICE_TOO_LOW: u64 = 1;\n    const ERROR_FEE_TOO_HIGH: u64 = 2;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Why use constants instead of hard-coding values? Three reasons:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Self-documenting"}),": ",(0,t.jsx)(n.code,{children:"MAX_FEE_PERCENTAGE"})," is clearer than ",(0,t.jsx)(n.code,{children:"10"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Easy to change"}),": Update one place instead of hunting through code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistency"}),": No risk of using different values in different places"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Error constants are especially important. When your code aborts with ",(0,t.jsx)(n.code,{children:"ERROR_PRICE_TOO_LOW"}),", developers immediately understand what went wrong."]}),"\n",(0,t.jsx)(n.h3,{id:"structs-defining-your-data",children:"Structs: Defining Your Data"}),"\n",(0,t.jsx)(n.p,{children:"Structs define the shape of your data. In a module context, they represent the core concepts your module works with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module marketplace::auction {\n    struct Auction has key {\n        seller: address,\n        item_id: u64,\n        current_bid: u64,\n        end_time: u64,\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This struct represents an auction. The ",(0,t.jsx)(n.code,{children:"has key"})," ability means it can be stored in global storage \u2013 each auction exists at a specific address on the blockchain. The fields capture everything needed to run an auction: who's selling, what they're selling, the current price, and when it ends."]}),"\n",(0,t.jsx)(n.h2,{id:"visibility-control-the-heart-of-module-security",children:"Visibility Control: The Heart of Module Security"}),"\n",(0,t.jsx)(n.p,{children:"Move's visibility system is what makes modules secure. Unlike traditional programming where everything is often accessible by default, Move makes you explicitly declare what's public."}),"\n",(0,t.jsx)(n.h3,{id:"private-by-default",children:"Private by Default"}),"\n",(0,t.jsx)(n.p,{children:"Functions in Move are private by default \u2013 they can only be called within the same module. This is a security feature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module 0x42::bank {\n    // Private - only this module can call it\n    fun calculate_interest(principal: u64, rate: u8): u64 {\n        (principal * (rate as u64)) / 100\n    }\n    \n    // Public - anyone can call this\n    public fun get_loan_amount(principal: u64): u64 {\n        let interest = calculate_interest(principal, 5);\n        principal + interest\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"calculate_interest"})," function is an implementation detail. By keeping it private, you can change how interest is calculated without breaking other modules that depend on your code. The public ",(0,t.jsx)(n.code,{children:"get_loan_amount"})," function provides a stable interface while hiding the complexity."]}),"\n",(0,t.jsx)(n.h3,{id:"public-functions-your-modules-api",children:"Public Functions: Your Module's API"}),"\n",(0,t.jsx)(n.p,{children:"Public functions are promises to the outside world. Once you make a function public, other modules will depend on it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"public fun transfer(from: &mut Account, to: &mut Account, amount: u64) {\n    assert!(from.balance >= amount, ERROR_INSUFFICIENT_FUNDS);\n    from.balance = from.balance - amount;\n    to.balance = to.balance + amount;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This function is public because other modules need to transfer funds. The function signature \u2013 its name, parameters, and return type \u2013 becomes a contract you shouldn't break."}),"\n",(0,t.jsx)(n.h3,{id:"entry-functions-transaction-entry-points",children:"Entry Functions: Transaction Entry Points"}),"\n",(0,t.jsxs)(n.p,{children:["Some public functions need to be called directly by users through transactions. These are marked as ",(0,t.jsx)(n.code,{children:"entry"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"public entry fun create_auction(\n    seller: &signer,\n    item_id: u64,\n    starting_price: u64\n) {\n    let seller_addr = signer::address_of(seller);\n    // Create the auction\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Entry functions have special rules:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"They can only take primitive types and references as parameters"}),"\n",(0,t.jsx)(n.li,{children:"They cannot return values"}),"\n",(0,t.jsx)(n.li,{children:"They're the bridge between users and your module"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"friend-functions-trusted-partnerships",children:"Friend Functions: Trusted Partnerships"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes you need to share functionality with specific modules without making it fully public. Friend functions solve this:"}),"\n",(0,t.jsx)(n.admonition,{title:"Real-World Example",type:"info",children:(0,t.jsxs)(n.p,{children:["See friend functions in action in complex multi-module systems. While our example guides use simpler patterns, the ",(0,t.jsx)(n.a,{href:"/guides/escrow",children:"Escrow Contract"})," shows how modules can work together with clear boundaries using similar access control principles."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module 0x42::vault {\n    friend 0x42::vault_manager;\n    \n    // Only vault_manager can call this\n    public(friend) fun emergency_withdraw(amount: u64): Coin {\n        // Withdrawal logic\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Friend relationships must be declared explicitly. This creates a web of trust between modules while maintaining security. Common uses include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Administrative functions"}),"\n",(0,t.jsx)(n.li,{children:"Cross-module protocols"}),"\n",(0,t.jsx)(n.li,{children:"Privileged operations"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Visibility Best Practices",type:"tip",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Start with everything private"}),"\n",(0,t.jsx)(n.li,{children:"Only make functions public when other modules need them"}),"\n",(0,t.jsx)(n.li,{children:"Use entry functions for user-facing operations"}),"\n",(0,t.jsx)(n.li,{children:"Reserve friend functions for trusted module interactions"}),"\n"]})}),"\n",(0,t.jsx)(n.h2,{id:"building-modular-applications",children:"Building Modular Applications"}),"\n",(0,t.jsx)(n.p,{children:"As applications grow, proper module organization becomes crucial. The key is separation of concerns \u2013 each module should have one clear purpose."}),"\n",(0,t.jsx)(n.h3,{id:"single-responsibility-principle",children:"Single Responsibility Principle"}),"\n",(0,t.jsx)(n.p,{children:"Consider a marketplace application. Instead of one giant module, you'd separate concerns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module marketplace::token {\n    struct Token has key, store {\n        id: u64,\n        uri: vector<u8>,\n    }\n    \n    public fun mint(creator: &signer, uri: vector<u8>): Token {\n        // Minting logic\n    }\n}\n\nmodule marketplace::trading {\n    use marketplace::token::Token;\n    \n    struct Listing has key {\n        token: Token,\n        price: u64,\n    }\n    \n    public fun list_token(seller: &signer, token: Token, price: u64) {\n        // Listing logic\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"token"})," module handles token creation and management. The ",(0,t.jsx)(n.code,{children:"trading"})," module handles the marketplace logic. Each has a clear, focused purpose. This separation makes the code easier to understand, test, and maintain."]}),"\n",(0,t.jsx)(n.h3,{id:"interface-design-between-modules",children:"Interface Design Between Modules"}),"\n",(0,t.jsx)(n.p,{children:"When modules need to communicate, design clear interfaces. Think of interfaces as contracts between modules:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module defi::price_oracle {\n    struct PriceData has copy, drop {\n        token_pair: vector<u8>,\n        price: u64,\n        timestamp: u64,\n    }\n    \n    public fun get_price(token_a: vector<u8>, token_b: vector<u8>): PriceData {\n        // Return current price\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Any module can use this price oracle by calling ",(0,t.jsx)(n.code,{children:"get_price"}),". The ",(0,t.jsx)(n.code,{children:"PriceData"})," struct with ",(0,t.jsx)(n.code,{children:"copy, drop"})," abilities acts as a simple data transfer object \u2013 it can be freely copied and discarded, making it perfect for passing information between modules."]}),"\n",(0,t.jsx)(n.h2,{id:"common-module-patterns",children:"Common Module Patterns"}),"\n",(0,t.jsx)(n.p,{children:"Certain patterns appear repeatedly in Move development. Understanding these patterns helps you write better modules."}),"\n",(0,t.jsx)(n.h3,{id:"the-registry-pattern",children:"The Registry Pattern"}),"\n",(0,t.jsx)(n.p,{children:"When you need to manage a collection of items, the registry pattern provides a clean solution:"}),"\n",(0,t.jsx)(n.admonition,{title:"Pattern in Practice",type:"tip",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/guides/escrow",children:"Escrow Contract"})," uses a similar pattern with its ",(0,t.jsx)(n.code,{children:"LockupRef"})," and ",(0,t.jsx)(n.code,{children:"Lockup"})," structures to manage multiple escrow entries. The ",(0,t.jsx)(n.a,{href:"/guides/fee-splitter",children:"Fee Splitter"})," also demonstrates registry-like storage for managing multiple recipients."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module 0x42::user_registry {\n    use std::table::{Self, Table};\n    \n    struct Registry has key {\n        users: Table<address, UserInfo>,\n    }\n    \n    struct UserInfo has store {\n        username: vector<u8>,\n        reputation: u64,\n    }\n    \n    public fun register(user: &signer, username: vector<u8>) {\n        let user_addr = signer::address_of(user);\n        let registry = borrow_global_mut<Registry>(@0x42);\n        \n        table::add(&mut registry.users, user_addr, UserInfo {\n            username,\n            reputation: 0,\n        });\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This pattern centralizes data management. All user information lives in one place, making it easy to query and update. The ",(0,t.jsx)(n.code,{children:"Table"})," provides efficient key-value storage for large collections."]}),"\n",(0,t.jsx)(n.h3,{id:"the-capability-pattern",children:"The Capability Pattern"}),"\n",(0,t.jsx)(n.p,{children:"Capabilities are a powerful way to manage permissions:"}),"\n",(0,t.jsx)(n.admonition,{title:"See It Live",type:"success",children:(0,t.jsxs)(n.p,{children:["Our ",(0,t.jsx)(n.a,{href:"/guides/first-fa",children:"Fungible Asset Guide"})," demonstrates this pattern with ",(0,t.jsx)(n.code,{children:"MintRef"})," and ",(0,t.jsx)(n.code,{children:"BurnRef"})," capabilities that control who can create or destroy tokens. The pattern makes permission management explicit and transferable."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"module 0x42::admin {\n    struct AdminCap has key, store {}\n    \n    public fun grant_admin(admin: &signer, recipient: address) {\n        // Only the module deployer can grant admin\n        assert!(signer::address_of(admin) == @0x42, ERROR_NOT_AUTHORIZED);\n        transfer::public_transfer(AdminCap {}, recipient);\n    }\n    \n    public fun admin_action(_cap: &AdminCap) {\n        // Having AdminCap proves you're an admin\n        // Perform privileged action\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Instead of checking addresses or maintaining lists, capabilities are tokens that prove authorization. If you have an ",(0,t.jsx)(n.code,{children:"AdminCap"}),", you're an admin. This pattern is composable, transferable, and secure."]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"\ud83d\udcd6 More Module Patterns"}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Witness Pattern"}),": For one-time initialization"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"struct INIT has drop {}\n\nfun init(witness: INIT) {\n    // Can only be called once with the witness\n}\n"})}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Hot Potato Pattern"}),": Forces immediate handling"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"struct Receipt {\n    // No abilities - must be consumed\n}\n\npublic fun start_process(): Receipt {\n    Receipt {}\n}\n\npublic fun complete_process(receipt: Receipt) {\n    let Receipt {} = receipt;\n}\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"testing-your-modules",children:"Testing Your Modules"}),"\n",(0,t.jsx)(n.p,{children:"Testing is crucial for confidence in your code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"#[test_only]\nmodule 0x42::auction_tests {\n    use 0x42::auction;\n    \n    #[test]\n    fun test_auction_lifecycle() {\n        // Setup\n        let seller = @0x123;\n        let seller_signer = create_signer_for_test(seller);\n        \n        // Create auction\n        auction::create(seller_signer, item_id, starting_price);\n        \n        // Verify state\n        let (current_bid, leader) = auction::get_status(seller, item_id);\n        assert!(current_bid == starting_price, 0);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Tests live in separate test-only modules. They can access private functions and create test scenarios that would be impossible in production. Write tests for both success cases and failure modes."}),"\n",(0,t.jsx)(n.admonition,{title:"Testing Checklist",type:"note",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Test happy paths (everything works)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Test error conditions (things fail correctly)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Test edge cases (boundary conditions)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Test access control (permissions work)"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Test state transitions (data changes correctly)"}),"\n"]})}),"\n",(0,t.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsx)(n.p,{children:"Modules are Move's answer to code organization, and they're designed with blockchain's unique requirements in mind:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Immutability as a Feature"}),": Deployed code can't change, providing strong guarantees"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Explicit Visibility"}),": Security by default with fine-grained access control"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clear Dependencies"}),": Import system makes module relationships explicit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexible Patterns"}),": Capabilities, registries, and interfaces enable complex applications"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The module system might feel restrictive at first, but these constraints guide you toward secure, maintainable code."}),"\n",(0,t.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,t.jsxs)(n.p,{children:["In our next article, ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/move/functions",children:"Functions in Move: Declaration and Usage"})}),", we'll dive deep into function design, parameters, return values, and advanced patterns for building robust APIs."]}),"\n",(0,t.jsx)(n.p,{children:"Start practicing by creating a simple module \u2013 perhaps a todo list or basic token. As you get comfortable, try implementing patterns like registries or capabilities. Remember: good modules are focused, well-documented, and designed with security in mind."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);