"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[1453],{8213:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"indexer/sdk","title":"SDK Guide","description":"Get a working indexer in 5 minutes using our example repository. This guide shows you how to index ALL events from Cedra blockchain into PostgreSQL, then query them via GraphQL.","source":"@site/docs/indexer/sdk.mdx","sourceDirName":"indexer","slug":"/indexer/sdk","permalink":"/indexer/sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/indexer/sdk.mdx","tags":[],"version":"current","frontMatter":{"title":"SDK Guide"},"sidebar":"docs","previous":{"title":"Common Queries","permalink":"/indexer/common-queries"},"next":{"title":"Processors","permalink":"/indexer/processors"}}');var i=s(4848),t=s(8453);const o={title:"SDK Guide"},a="\ud83d\udee0\ufe0f SDK Guide",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"<strong>Rust &amp; Cargo</strong> (1.78+)",id:"rust--cargo-178",level:3},{value:"<strong>PostgreSQL</strong> (14+)",id:"postgresql-14",level:3},{value:"Understanding the Structure",id:"understanding-the-structure",level:2},{value:"<strong>\ud83d\udcc4 Processor Configuration</strong> - Setting Up Your Indexer",id:"-processor-configuration---setting-up-your-indexer",level:3},{value:"<strong>\ud83d\udcc4 Available Processor Types</strong>",id:"-available-processor-types",level:3},{value:"<strong>\ud83d\udcc4 Database Setup</strong>",id:"-database-setup",level:3},{value:"<strong>\ud83d\udcc4 Running the Processor</strong>",id:"-running-the-processor",level:3},{value:"<strong>\ud83d\udcc4 Key Features</strong>",id:"-key-features",level:3},{value:"Set Up Database",id:"set-up-database",level:2},{value:"Configure &amp; Run",id:"configure--run",level:2},{value:"\ud83d\udca1 Customizing the Example",id:"-customizing-the-example",level:2},{value:"Filter Specific Events",id:"filter-specific-events",level:3},{value:"Add Custom Processing",id:"add-custom-processing",level:3},{value:"Start From Specific Version",id:"start-from-specific-version",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"\ud83d\udcda <strong>Learn More</strong>",id:"-learn-more",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\ufe0f-sdk-guide",children:"\ud83d\udee0\ufe0f SDK Guide"})}),"\n",(0,i.jsx)(n.p,{children:"Get a working indexer in 5 minutes using our example repository. This guide shows you how to index ALL events from Cedra blockchain into PostgreSQL, then query them via GraphQL."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsxs)("summary",{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udccb Required Tools"})," - Click to expand installation commands"]}),(0,i.jsxs)(n.h3,{id:"rust--cargo-178",children:[(0,i.jsx)(n.strong,{children:"Rust & Cargo"})," (1.78+)"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install Rust\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource $HOME/.cargo/env\n\n# Verify\ncargo --version\n"})}),(0,i.jsxs)(n.h3,{id:"postgresql-14",children:[(0,i.jsx)(n.strong,{children:"PostgreSQL"})," (14+)"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# macOS\nbrew install postgresql\nbrew services start postgresql\n\n# Ubuntu/Debian\nsudo apt install postgresql postgresql-contrib\nsudo systemctl start postgresql\n\n# Verify\npsql --version\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-structure",children:"Understanding the Structure"}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcc2 ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/cedra-labs/cedra-indexer-processors-v2",children:"Cedra Indexer Processors Repository"})})]}),"\n",(0,i.jsx)(n.p,{children:"This repository contains pre-built processors and examples for indexing Cedra blockchain data.\nThe example provides a complete indexer. Here's what each file does:"}),"\n",(0,i.jsxs)(n.h3,{id:"-processor-configuration---setting-up-your-indexer",children:[(0,i.jsx)(n.strong,{children:"\ud83d\udcc4 Processor Configuration"})," - Setting Up Your Indexer"]}),"\n",(0,i.jsx)(n.p,{children:"Configure your processor to connect to Cedra's data stream:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'processor_config:\n  type: "events_processor"  # Choose processor type\n  channel_size: 1000\n\ntransaction_stream_config:\n  indexer_grpc_data_service_address: "GRPC_ADDRESS"\n\ndb_config:\n  postgres_connection_string: "postgresql://localhost:5432/cedra_indexer"\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why use it:"})," Pre-built processors handle all complexity - connection management, error handling, progress tracking, and recovery."]}),"\n",(0,i.jsx)(n.h3,{id:"-available-processor-types",children:(0,i.jsx)(n.strong,{children:"\ud83d\udcc4 Available Processor Types"})}),"\n",(0,i.jsx)(n.p,{children:"Choose from pre-built processors:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"events_processor"})})," - Indexes all blockchain events"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"coin_processor"})})," - Tracks fungible token balances"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"nft_processor"})})," - Indexes NFT collections and ownership"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"cns_processor"})})," - Processes Cedra Name Service data"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Each processor automatically creates optimized database schemas and handles all data extraction."}),"\n",(0,i.jsx)(n.h3,{id:"-database-setup",children:(0,i.jsx)(n.strong,{children:"\ud83d\udcc4 Database Setup"})}),"\n",(0,i.jsx)(n.p,{children:"Processors automatically handle everything:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Automatic table creation"})," - No manual SQL needed"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Optimized indexes"})," - Created automatically for performance"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Migration management"})," - Processors handle schema updates"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Progress tracking"})," - Built-in checkpoint system"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Just create your database and the processor does the rest:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create database\ncreatedb cedra_indexer\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-running-the-processor",children:(0,i.jsx)(n.strong,{children:"\ud83d\udcc4 Running the Processor"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Clone the repository\ngit clone https://github.com/cedra-labs/cedra-indexer-processors-v2\ncd cedra-indexer-processors-v2/processor\n\n# Build and run\ncargo run --release -- -c config.yaml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-key-features",children:(0,i.jsx)(n.strong,{children:"\ud83d\udcc4 Key Features"})}),"\n",(0,i.jsx)(n.p,{children:"All processors include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automatic checkpointing"})," - Resume from where you left off"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel processing"})," - Handle thousands of transactions per second"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error recovery"})," - Automatic retries and failure handling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Progress tracking"})," - Monitor indexing status in real-time"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"set-up-database",children:"Set Up Database"}),"\n",(0,i.jsx)(n.p,{children:"Create your PostgreSQL database:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create database\ncreatedb cedra_indexer\n\n# Verify it exists\npsql -l | grep cedra_indexer\n"})}),"\n",(0,i.jsx)(n.p,{children:"That's it! The processor will automatically:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create all necessary tables (events, processor_status, ledger_infos)"}),"\n",(0,i.jsx)(n.li,{children:"Set up optimized indexes"}),"\n",(0,i.jsx)(n.li,{children:"Handle migrations and schema updates"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Database GUI",type:"tip",children:(0,i.jsxs)(n.p,{children:["To explore your indexed data, consider installing ",(0,i.jsx)(n.a,{href:"https://dbeaver.io/",children:"DBeaver"})," or ",(0,i.jsx)(n.a,{href:"https://www.pgadmin.org/",children:"pgAdmin"}),". Connect using: ",(0,i.jsx)(n.code,{children:"postgresql://localhost/cedra_indexer"})]})}),"\n",(0,i.jsx)(n.h2,{id:"configure--run",children:"Configure & Run"}),"\n",(0,i.jsx)(n.p,{children:"First, create your configuration file from the template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Copy the example configuration\ncp example-config.yaml config.yaml\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now edit ",(0,i.jsx)(n.code,{children:"config.yaml"})," to point to your database. Open it in your editor and change:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# FROM this (example default):\npostgres_config:\n  connection_string: postgresql://postgres:@localhost:5432/example\n\n# TO this (your actual database):\npostgres_config:\n  connection_string: postgresql://localhost:5432/cedra_indexer\n"})}),"\n",(0,i.jsx)(n.p,{children:"The configuration tells your indexer:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Where to get data"}),": ",(0,i.jsx)(n.code,{children:"indexer_grpc_data_service_address"})," points to grpc service"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Where to start"}),": ",(0,i.jsx)(n.code,{children:"starting_version: 0"})," means begin from genesis (first block)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Where to store"}),": ",(0,i.jsx)(n.code,{children:"connection_string"})," points to your PostgreSQL database"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Build your indexer in release mode (optimized for speed):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Compile with optimizations\ncargo build --release\n"})}),"\n",(0,i.jsx)(n.p,{children:"This might take a few minutes the first time as it downloads and compiles dependencies."}),"\n",(0,i.jsx)(n.p,{children:"Finally, run your indexer:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Start indexing! The -- separates cargo args from your program args\ncargo run --release -- -c config.yaml\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-customizing-the-example",children:"\ud83d\udca1 Customizing the Example"}),"\n",(0,i.jsx)(n.h3,{id:"filter-specific-events",children:"Filter Specific Events"}),"\n",(0,i.jsxs)(n.p,{children:["Edit ",(0,i.jsx)(n.code,{children:"src/main.rs"})," to index only what you need:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Only process your contract\'s events\nlet filtered_events: Vec<_> = raw_events\n    .iter()\n    .filter(|e| e.type_str.contains("0xYOUR_ADDRESS::your_module"))\n    .cloned()\n    .collect();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"add-custom-processing",children:"Add Custom Processing"}),"\n",(0,i.jsx)(n.p,{children:"Transform data before storing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Extract specific fields from event data\nfor event in &mut events {\n    if let Some(amount) = event.data.get("amount") {\n        // Process amount, calculate metrics, etc.\n        info!("Processing amount: {}", amount);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"start-from-specific-version",children:"Start From Specific Version"}),"\n",(0,i.jsx)(n.p,{children:"Don't need historical data? Start from recent blocks:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"transaction_stream_config:\n  starting_version: 5000000  # Start from block 5M\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Your indexer is running! Here's what to explore next:"}),"\n",(0,i.jsxs)(n.h3,{id:"-learn-more",children:["\ud83d\udcda ",(0,i.jsx)(n.strong,{children:"Learn More"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/indexer/how-it-works",children:"How Indexing Works"})})," - Understand the complete data pipeline"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/indexer/common-queries",children:"Common Queries"})})," - GraphQL query patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/indexer/processors",children:"Processors"})})," - Build specialized indexers"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);