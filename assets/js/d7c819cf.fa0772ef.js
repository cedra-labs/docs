"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[232],{779:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"getting-started/tx","title":"Your First Transaction","description":"Learn how to create, sign, and submit your first transaction on the CEDRA blockchain","source":"@site/docs/getting-started/tx.md","sourceDirName":"getting-started","slug":"/getting-started/tx","permalink":"/getting-started/tx","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/getting-started/tx.md","tags":[],"version":"current","frontMatter":{"title":"Your First Transaction","description":"Learn how to create, sign, and submit your first transaction on the CEDRA blockchain","keywords":["cedra","blockchain","transaction","tutorial","getting-started"]},"sidebar":"docs","previous":{"title":"Faucet","permalink":"/getting-started/faucet"},"next":{"title":"Build a Counter Contract","permalink":"/getting-started/counter"}}');var i=t(4848),a=t(8453);const c={title:"Your First Transaction",description:"Learn how to create, sign, and submit your first transaction on the CEDRA blockchain",keywords:["cedra","blockchain","transaction","tutorial","getting-started"]},o="Your First Transaction",r={},l=[{value:"Setting Up Your Environment",id:"setting-up-your-environment",level:2},{value:"Initialize a TypeScript Project",id:"initialize-a-typescript-project",level:3},{value:"Creating Your First Transaction",id:"creating-your-first-transaction",level:2},{value:"Step 1: Generate Test Accounts",id:"step-1-generate-test-accounts",level:3},{value:"Step 2: Fund Alice&#39;s account from faucet",id:"step-2-fund-alices-account-from-faucet",level:3},{value:"Step 3: Build the Transaction",id:"step-3-build-the-transaction",level:3},{value:"Step 4: Simulate the Transaction",id:"step-4-simulate-the-transaction",level:3},{value:"Step 5: Sign and Submit",id:"step-5-sign-and-submit",level:3},{value:"Running Your First Transaction",id:"running-your-first-transaction",level:2},{value:"Using the CLI Alternative",id:"using-the-cli-alternative",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"\ud83d\udee0\ufe0f Build Your First Application",id:"\ufe0f-build-your-first-application",level:3}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"your-first-transaction",children:"Your First Transaction"})}),"\n",(0,i.jsx)(e.p,{children:"This tutorial will guide you through creating and submitting your first transaction on the CEDRA blockchain. You'll learn how to:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Set up your development environment for transactions"}),"\n",(0,i.jsx)(e.li,{children:"Create test accounts programmatically"}),"\n",(0,i.jsx)(e.li,{children:"Build a transaction to transfer CEDRA coins"}),"\n",(0,i.jsx)(e.li,{children:"Simulate the transaction to estimate costs"}),"\n",(0,i.jsx)(e.li,{children:"Sign and submit the transaction"}),"\n",(0,i.jsx)(e.li,{children:"Verify the transaction was executed successfully"}),"\n"]}),"\n",(0,i.jsxs)(e.admonition,{title:"Prerequisites",type:"tip",children:[(0,i.jsx)(e.p,{children:"Before starting this guide, make sure you have:"}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u2705 ",(0,i.jsx)(e.a,{href:"./cli",children:"Installed the CEDRA CLI"})]}),"\n",(0,i.jsxs)(e.li,{children:["\u2705 ",(0,i.jsx)(e.a,{href:"./faucet",children:"Obtained test tokens from the faucet"})]}),"\n"]})]}),"\n",(0,i.jsx)(e.h2,{id:"setting-up-your-environment",children:"Setting Up Your Environment"}),"\n",(0,i.jsx)(e.p,{children:"Let's create a dedicated directory for learning about transactions:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"mkdir cedra-first-transaction\ncd cedra-first-transaction\n"})}),"\n",(0,i.jsx)(e.h3,{id:"initialize-a-typescript-project",children:"Initialize a TypeScript Project"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npm init -y\nnpm install @cedra-labs/ts-sdk typescript @types/node ts-node\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Create a ",(0,i.jsx)(e.code,{children:"tsconfig.json"})," file:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",metastring:'title="tsconfig.json"',children:'{\n  "compilerOptions": {\n    "target": "ES2020",\n    "module": "commonjs",\n    "lib": ["ES2020"],\n    "outDir": "./dist",\n    "rootDir": "./src",\n    "strict": true,\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true,\n    "resolveJsonModule": true\n  }\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"Create a source directory and your first transaction file:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"mkdir src\ntouch src/first-transaction.ts\n"})}),"\n",(0,i.jsx)(e.h2,{id:"creating-your-first-transaction",children:"Creating Your First Transaction"}),"\n",(0,i.jsx)(e.p,{children:"Now let's write the code to create and submit a transaction:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",metastring:'title="src/first-transaction.ts"',children:'import {\n  Account,\n  Cedra,\n  CedraConfig,\n  Network,\n} from "@cedra-labs/ts-sdk";\n\nasync function main() {\n  // Step 1: Initialize the CEDRA client\n  console.log("=== Connecting to CEDRA ===");\n  const config = new CedraConfig({ network: Network.TESTNET });\n  const client = new Cedra(config);\n  console.log("\u2705 Connected to CEDRA testnet");\n\n  // Display network info\n  const chainId = await client.getChainId();\n  console.log(`Chain ID: ${chainId}`);\n  \n  // Continue with account creation...\n}\n\nmain().catch(console.error);\n'})}),"\n",(0,i.jsx)(e.h3,{id:"step-1-generate-test-accounts",children:"Step 1: Generate Test Accounts"}),"\n",(0,i.jsx)(e.p,{children:"Add this code to create Alice (sender) and Bob (receiver) accounts:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",metastring:'title="src/first-transaction.ts" {15-25}',children:'async function main() {\n\n  // ... previous code ...\n  console.log("=== Creating Accounts ===");\n  const alice = Account.generate();\n  const bob = Account.generate();\n  \n  console.log("Alice\'s address:", alice.accountAddress.toString());\n  console.log("Alice\'s public key:", alice.publicKey.toString());\n  console.log("\\nBob\'s address:", bob.accountAddress.toString());\n  console.log("Bob\'s public key:", bob.publicKey.toString());\n}\n'})}),"\n",(0,i.jsx)(e.admonition,{title:"Security Note",type:"warning",children:(0,i.jsx)(e.p,{children:"Never share or commit private keys! In production applications, use secure key management solutions. These keys control access to your funds."})}),"\n",(0,i.jsx)(e.h3,{id:"step-2-fund-alices-account-from-faucet",children:"Step 2: Fund Alice's account from faucet"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",metastring:'title="src/first-transaction.ts"',children:'\n  // ... previous code ...\n  console.log("\\n=== Funding Accounts ===");\n  await client.faucet.fundAccount({\n    accountAddress: alice.accountAddress,\n    amount: 100_000_000, // 1 CEDRA = 100,000,000 sub-units\n  });\n  console.log("\u2705 Alice\'s account funded");\n  \n  // Check initial balances\n  const aliceBalance = await client.getAccountCoinAmount({\n    accountAddress: alice.accountAddress,\n    coinType: "0x1::cedra_coin::CedraCoin",\n  });\n  \n  const bobBalance = await client.getAccountCoinAmount({\n    accountAddress: bob.accountAddress,\n    coinType: "0x1::cedra_coin::CedraCoin",\n  });\n  \n  console.log("\\n=== Initial Balances ===");\n  console.log(`Alice: ${aliceBalance} sub-units (${aliceBalance / 100_000_000} CEDRA)`);\n  console.log(`Bob: ${bobBalance} sub-units (${bobBalance / 100_000_000} CEDRA)`);\n'})}),"\n",(0,i.jsx)(e.h3,{id:"step-3-build-the-transaction",children:"Step 3: Build the Transaction"}),"\n",(0,i.jsx)(e.p,{children:"Now let's create a transaction to transfer 1,000 sub-units from Alice to Bob:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",metastring:'title="src/first-transaction.ts"',children:'async function main() {\n\n  // ... previous code ...\n  console.log("\\n=== Building Transaction ===");\n  const transaction = await client.transaction.build.simple({\n    sender: alice.accountAddress,\n    data: {\n      function: "0x1::cedra_account::transfer",\n      functionArguments: [\n        bob.accountAddress,\n        1000, // Transfer 1000 sub-units\n      ],\n    },\n  });\n  \n  console.log("\u2705 Transaction built");\n  console.log("Transaction details:");\n  console.log(`  - Function: 0x1::cedra_account::transfer`);\n  console.log(`  - Sender: ${alice.accountAddress}`);\n  console.log(`  - Recipient: ${bob.accountAddress}`);\n  console.log(`  - Amount: 1000 sub-units`);\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"step-4-simulate-the-transaction",children:"Step 4: Simulate the Transaction"}),"\n",(0,i.jsx)(e.p,{children:"Before submitting, let's simulate to see the gas costs:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",metastring:'title="src/first-transaction.ts" {75-89}',children:'async function main() {\n\n  // ... previous code ...\n  console.log("\\n=== Simulating Transaction ===");\n  const [simulationResult] = await client.transaction.simulate.simple({\n    signerPublicKey: alice.publicKey,\n    transaction,\n  });\n  \n  const gasUsed = parseInt(simulationResult.gas_used);\n  const gasUnitPrice = parseInt(simulationResult.gas_unit_price);\n  const totalGasCost = gasUsed * gasUnitPrice;\n  \n  console.log("\u2705 Simulation complete");\n  console.log(`  - Gas units used: ${gasUsed}`);\n  console.log(`  - Gas unit price: ${gasUnitPrice}`);\n  console.log(`  - Total gas cost: ${totalGasCost} sub-units`);\n  console.log(`  - Status: ${simulationResult.success ? "\u2705 Will succeed" : "\u274c Will fail"}`);\n}\n'})}),"\n",(0,i.jsx)(e.admonition,{title:"Gas Fees",type:"note",children:(0,i.jsxs)(e.p,{children:["Gas is the computational fee for processing transactions. Total cost = ",(0,i.jsx)(e.code,{children:"gas_used \xd7 gas_unit_price"}),"."]})}),"\n",(0,i.jsx)(e.h3,{id:"step-5-sign-and-submit",children:"Step 5: Sign and Submit"}),"\n",(0,i.jsx)(e.p,{children:"Now let's sign the transaction with Alice's private key and submit it:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",metastring:'title="src/first-transaction.ts" {87-125}',children:'async function main() {\n\n  // ... previous code ...\n  console.log("\\n=== Signing Transaction ===");\n  const senderAuthenticator = await client.transaction.sign({\n    signer: alice,\n    transaction,\n  });\n  console.log("\u2705 Transaction signed");\n  \n  // Submit the transaction\n  console.log("\\n=== Submitting Transaction ===");\n  const pendingTransaction = await client.transaction.submit.simple({\n    transaction,\n    senderAuthenticator,\n  });\n  \n  console.log("\u2705 Transaction submitted");\n  console.log(`Transaction hash: ${pendingTransaction.hash}`);\n  console.log(`View on explorer: https://explorer.testnet.cedra.network/txn/${pendingTransaction.hash}`);\n  \n  // Wait for confirmation\n  console.log("\\n=== Waiting for Confirmation ===");\n  const committedTransaction = await client.waitForTransaction({\n    transactionHash: pendingTransaction.hash,\n  });\n  \n  console.log("\u2705 Transaction confirmed");\n  console.log(`  - Status: ${committedTransaction.success ? "SUCCESS" : "FAILED"}`);\n  console.log(`  - Gas used: ${committedTransaction.gas_used}`);\n  console.log(`  - VM Status: ${committedTransaction.vm_status}`);\n  \n  // Verify final balances\n  console.log("\\n=== Final Balances ===");\n  const aliceFinalBalance = await client.getAccountCoinAmount({\n    accountAddress: alice.accountAddress,\n    coinType: "0x1::cedra_coin::CedraCoin",\n  });\n  \n  const bobFinalBalance = await client.getAccountCoinAmount({\n    accountAddress: bob.accountAddress,\n    coinType: "0x1::cedra_coin::CedraCoin",\n  });\n  \n  console.log(`Alice: ${aliceFinalBalance} sub-units (spent ${aliceBalance - aliceFinalBalance})`);\n  console.log(`Bob: ${bobFinalBalance} sub-units (received ${bobFinalBalance - bobBalance})`);\n  \n  const totalCost = aliceBalance - aliceFinalBalance;\n  const gasCost = totalCost - 1000;\n  console.log(`\\nTransaction breakdown:`);\n  console.log(`  - Transfer amount: 1000 sub-units`);\n  console.log(`  - Gas fee: ${gasCost} sub-units`);\n  console.log(`  - Total cost: ${totalCost} sub-units`);\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"running-your-first-transaction",children:"Running Your First Transaction"}),"\n",(0,i.jsx)(e.p,{children:"Execute the complete code:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npx ts-node src/first-transaction.ts\n"})}),"\n",(0,i.jsx)(e.p,{children:"You should see output similar to:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"=== Connecting to CEDRA ===\n\u2705 Connected to CEDRA testnet\nChain ID: 4\nAPI Endpoint: https://testnet.cedra.dev/v1\n\n=== Creating Accounts ===\nAlice's address: 0x978c213990c4833df71548df7ce49d54c759d6b6d932de22b24d56060b7af2aa\nBob's address: 0x7af2d6c93a2feafc9b69b5e8ad9d6b513b260f62f23f3a384a3a2e4a84694a9b\n\n=== Initial Balances ===\nAlice: 100000000 sub-units (1 CEDRA)\nBob: 0 sub-units (0 CEDRA)\n\n=== Building Transaction ===\n\u2705 Transaction built\n\n=== Simulating Transaction ===\n\u2705 Simulation complete\n  - Gas units used: 146\n  - Total gas cost: 14600 sub-units\n  - Status: \u2705 Will succeed\n\n=== Submitting Transaction ===\n\u2705 Transaction submitted\nTransaction hash: 0x3a8a3e34a1c64ad9d7636a3a827b7ec3bb12d73825b36fa06d425c5a3b42cccc\n\n=== Final Balances ===\nAlice: 99984400 sub-units (spent 15600)\nBob: 1000 sub-units (received 1000)\n"})}),"\n",(0,i.jsx)(e.h2,{id:"using-the-cli-alternative",children:"Using the CLI Alternative"}),"\n",(0,i.jsx)(e.p,{children:"You can also execute transactions using the CEDRA CLI:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Transfer using CLI\ncedra move run \\\n  --function-id 0x1::cedra_account::transfer \\\n  --args address:0x7af2d6c93a2feafc9b69b5e8ad9d6b513b260f62f23f3a384a3a2e4a84694a9b u64:1000 \\\n  --sender-account default\n"})}),"\n",(0,i.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(e.p,{children:"Congratulations! You've successfully created and executed your first transaction on CEDRA. Here's what to explore next:"}),"\n",(0,i.jsx)(e.h3,{id:"\ufe0f-build-your-first-application",children:"\ud83d\udee0\ufe0f Build Your First Application"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"./counter",children:(0,i.jsx)(e.strong,{children:"Counter App Tutorial"})})," - Build a complete dApp with a frontend"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"../move/introduction",children:"Move Basics"})," - Learn the Move programming languagecontracts"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>c,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function c(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:c(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);