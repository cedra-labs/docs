"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[2966],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},9802:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"sdks/typescript/examples","title":"Examples & Patterns","description":"Learn how to build real applications on Cedra through practical examples and proven patterns.","source":"@site/docs/sdks/typescript/examples.mdx","sourceDirName":"sdks/typescript","slug":"/sdks/typescript/examples","permalink":"/sdks/typescript/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/sdks/typescript/examples.mdx","tags":[],"version":"current","frontMatter":{"title":"Examples & Patterns","sidebar_label":"Examples"},"sidebar":"docs","previous":{"title":"Transactions","permalink":"/sdks/typescript/transactions"},"next":{"title":"Glossary","permalink":"/glossary"}}');var i=t(4848),r=t(8453);const a={title:"Examples & Patterns",sidebar_label:"Examples"},o="\ud83c\udfae Examples & Patterns",l={},c=[{value:"\ud83d\udcda Learn by Building",id:"-learn-by-building",level:2},{value:"Getting Started",id:"getting-started",level:3},{value:"Token Development",id:"token-development",level:3},{value:"DeFi Applications",id:"defi-applications",level:3},{value:"\ud83d\udd04 Common Patterns",id:"-common-patterns",level:2},{value:"Connection Management",id:"connection-management",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Gas Optimization",id:"gas-optimization",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-examples--patterns",children:"\ud83c\udfae Examples & Patterns"})}),"\n",(0,i.jsx)(n.p,{children:"Learn how to build real applications on Cedra through practical examples and proven patterns."}),"\n",(0,i.jsx)(n.admonition,{title:"Navigation",type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\ud83d\udccd You are here:"})," Examples & Patterns\n",(0,i.jsx)(n.strong,{children:"\u2b05\ufe0f Previous:"})," ",(0,i.jsx)(n.a,{href:"/sdks/typescript/transactions",children:"Transaction Guide"}),"\n",(0,i.jsx)(n.strong,{children:"\ud83c\udfe0 Back to:"})," ",(0,i.jsx)(n.a,{href:"/sdks/typescript-sdk",children:"TypeScript SDK"})]})}),"\n",(0,i.jsx)(n.h2,{id:"-learn-by-building",children:"\ud83d\udcda Learn by Building"}),"\n",(0,i.jsx)(n.p,{children:"The best way to master the Cedra TypeScript SDK is by building real projects. These guides walk you through complete implementations:"}),"\n",(0,i.jsx)(n.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/getting-started/tx#creating-your-first-transaction",children:"Your First Transaction"})})," - Step-by-step tutorial using TypeScript SDK to send your first CED tokens"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/getting-started/counter",children:"Build a Counter Contract"})})," - Create and interact with your first smart contract"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/getting-started/faucet",children:"Get Test Tokens"})})," - Fund your account for testing"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"token-development",children:"Token Development"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/guides/first-fa",children:"Fungible Asset Guide"})})," - Create your own token with minting, burning, and transfer capabilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/guides/first-nft",children:"NFT Contract Walkthrough"})})," - Build a complete NFT collection with minting and marketplace features"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"defi-applications",children:"DeFi Applications"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/guides/dex",children:"Build a DEX"})})," - Implement a decentralized exchange with liquidity pools and swapping"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/guides/fee-splitter",children:"Fee Splitter Contract"})})," - Automatically distribute payments among multiple recipients"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/guides/escrow",children:"Escrow System"})})," - Create secure, time-locked payments for marketplaces"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Each guide includes complete TypeScript code using the SDK, explanations of key concepts, and best practices."}),"\n",(0,i.jsx)(n.h2,{id:"-common-patterns",children:"\ud83d\udd04 Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"connection-management",children:"Connection Management"}),"\n",(0,i.jsx)(n.p,{children:"When building applications, you'll want to reuse the same client connection throughout your app. Instead of creating multiple instances, establish one connection and share it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Initialize once in your app\nimport { Cedra, CedraConfig, Network } from "@cedra-labs/ts-sdk";\n\nconst config = new CedraConfig({ network: Network.TESTNET });\nexport const client = new Cedra(config);\n'})}),"\n",(0,i.jsx)(n.p,{children:"This pattern prevents connection overhead and ensures consistent configuration across your application. For production apps, consider implementing connection pooling and retry logic."}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"Blockchain operations can fail for various reasons - insufficient funds, network issues, or smart contract errors. Good error handling is crucial for user experience."}),"\n",(0,i.jsx)(n.p,{children:"Instead of letting errors crash your app, anticipate common failures:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check balances before transfers"}),"\n",(0,i.jsx)(n.li,{children:"Simulate transactions before submission"}),"\n",(0,i.jsx)(n.li,{children:"Provide clear error messages to users"}),"\n",(0,i.jsx)(n.li,{children:"Implement retry logic for network failures"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The SDK provides detailed error messages that help identify issues quickly. Always wrap blockchain operations in try-catch blocks and provide fallback behavior."}),"\n",(0,i.jsx)(n.h3,{id:"gas-optimization",children:"Gas Optimization"}),"\n",(0,i.jsx)(n.p,{children:"Gas costs can vary significantly based on network congestion and transaction complexity. To optimize costs:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simulate first"})," - Always simulate to estimate costs before submission"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batch operations"})," - Combine multiple operations when possible"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time your transactions"})," - Submit during low-congestion periods"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Set appropriate limits"})," - Don't overpay with excessive gas limits"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Remember that simple transfers are cheap (5-10 gas units) while complex DeFi operations can use thousands."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);