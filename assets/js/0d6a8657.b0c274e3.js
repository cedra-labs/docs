"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[854],{3287:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"getting-started/counter","title":"Building Your First Counter Smart Contract","description":"Welcome to your first Move smart contract on Cedra! In this tutorial, you\'ll learn how to create, compile, test, and deploy a simple counter contract that demonstrates the fundamental concepts of Move programming.","source":"@site/docs/getting-started/counter.md","sourceDirName":"getting-started","slug":"/getting-started/counter","permalink":"/docs/getting-started/counter","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/getting-started/counter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Faucet","permalink":"/docs/getting-started/faucet"},"next":{"title":"Cedra Documentation","permalink":"/docs/intro"}}');var c=t(4848),o=t(8453);const s={},i="Building Your First Counter Smart Contract",a={},l=[{value:"\ud83d\udccb Prerequisites",id:"-prerequisites",level:2},{value:"\ud83d\ude80 Step 1: Create a New Move Project",id:"-step-1-create-a-new-move-project",level:2},{value:"Update Move.toml",id:"update-movetoml",level:3},{value:"\ud83d\udcdd Step 2: Write the Counter Contract",id:"-step-2-write-the-counter-contract",level:2},{value:"\ud83e\uddea Step 3: Add Tests",id:"-step-3-add-tests",level:2},{value:"\ud83d\udd28 Step 4: Compile and Test",id:"-step-4-compile-and-test",level:2},{value:"\ud83d\ude80 Step 5: Deploy to Testnet",id:"-step-5-deploy-to-testnet",level:2},{value:"\ud83c\udfae Step 6: Interact with Your Contract",id:"-step-6-interact-with-your-contract",level:2},{value:"Initialize the Counter",id:"initialize-the-counter",level:3},{value:"Increment the Counter",id:"increment-the-counter",level:3},{value:"Check the Current Value",id:"check-the-current-value",level:3},{value:"Increment a Few More Times",id:"increment-a-few-more-times",level:3},{value:"Check the Value Again",id:"check-the-value-again",level:3},{value:"\ud83e\udde0 Understanding the Code",id:"-understanding-the-code",level:2},{value:"Resources (<code>struct Counter has key</code>)",id:"resources-struct-counter-has-key",level:3},{value:"Entry Functions (<code>public entry fun</code>)",id:"entry-functions-public-entry-fun",level:3},{value:"Acquires (<code>acquires Counter</code>)",id:"acquires-acquires-counter",level:3},{value:"Global Storage Operations",id:"global-storage-operations",level:3},{value:"View Functions (<code>#[view]</code>)",id:"view-functions-view",level:3},{value:"\ud83c\udfa8 Next Steps",id:"-next-steps",level:2},{value:"\ud83d\udcda Additional Resources",id:"-additional-resources",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"building-your-first-counter-smart-contract",children:"Building Your First Counter Smart Contract"})}),"\n",(0,c.jsx)(n.p,{children:"Welcome to your first Move smart contract on Cedra! In this tutorial, you'll learn how to create, compile, test, and deploy a simple counter contract that demonstrates the fundamental concepts of Move programming."}),"\n",(0,c.jsx)(n.h2,{id:"-prerequisites",children:"\ud83d\udccb Prerequisites"}),"\n",(0,c.jsx)(n.p,{children:"Before we start, make sure you have:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"/docs/getting-started/cli",children:"Cedra CLI installed"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"/docs/cli/usage#1-initial-configuration",children:"A configured Cedra account"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"/docs/handbook-for-newcomers",children:"Basic understanding of blockchain concepts"})}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"-step-1-create-a-new-move-project",children:"\ud83d\ude80 Step 1: Create a New Move Project"}),"\n",(0,c.jsx)(n.p,{children:"First, let's create a new Move project for our counter contract:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"mkdir counter-project\ncd counter-project\ncedra move init --name counter\n"})}),"\n",(0,c.jsx)(n.p,{children:"This creates a new Move package with the following structure:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"counter/\n\u251c\u2500\u2500 Move.toml\n\u2514\u2500\u2500 sources/\n"})}),"\n",(0,c.jsx)(n.h3,{id:"update-movetoml",children:"Update Move.toml"}),"\n",(0,c.jsxs)(n.p,{children:["Before writing our contract, we need to setup counter address in the ",(0,c.jsx)(n.code,{children:"Move.toml"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-toml",children:'...\n\n[addresses]\ncounter = "YOUR_ACCOUNT_ADDRESS"\n\n...\n'})}),"\n",(0,c.jsx)(n.h2,{id:"-step-2-write-the-counter-contract",children:"\ud83d\udcdd Step 2: Write the Counter Contract"}),"\n",(0,c.jsxs)(n.p,{children:["Create a new file ",(0,c.jsx)(n.code,{children:"sources/counter.move"})," with the following content:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-rust",children:"module counter::simple_counter {\n    use std::signer;\n    \n    /// The counter resource that will be stored in each account\n    struct Counter has key {\n        value: u64,\n    }\n    \n    /// Error codes\n    const E_COUNTER_NOT_EXISTS: u64 = 1;\n    \n    /// Initialize a counter for the given account with value 0\n    public entry fun initialize(account: &signer) {\n        let counter = Counter { value: 0 };\n        move_to(account, counter);\n    }\n    \n    /// Increment the counter by 1\n    public entry fun increment(account: &signer) acquires Counter {\n        let account_addr = signer::address_of(account);\n        assert!(exists<Counter>(account_addr), E_COUNTER_NOT_EXISTS);\n        \n        let counter = borrow_global_mut<Counter>(account_addr);\n        counter.value = counter.value + 1;\n    }\n    \n    /// Decrement the counter by 1 (with underflow protection)\n    public entry fun decrement(account: &signer) acquires Counter {\n        let account_addr = signer::address_of(account);\n        assert!(exists<Counter>(account_addr), E_COUNTER_NOT_EXISTS);\n        \n        let counter = borrow_global_mut<Counter>(account_addr);\n        if (counter.value > 0) {\n            counter.value = counter.value - 1;\n        };\n    }\n    \n    #[view]\n    /// Get the current counter value (read-only)\n    public fun get_count(account_addr: address): u64 acquires Counter {\n        assert!(exists<Counter>(account_addr), E_COUNTER_NOT_EXISTS);\n        let counter = borrow_global<Counter>(account_addr);\n        counter.value\n    }\n    \n    /// Reset the counter to 0\n    public entry fun reset(account: &signer) acquires Counter {\n        let account_addr = signer::address_of(account);\n        assert!(exists<Counter>(account_addr), E_COUNTER_NOT_EXISTS);\n        \n        let counter = borrow_global_mut<Counter>(account_addr);\n        counter.value = 0;\n    }\n}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"-step-3-add-tests",children:"\ud83e\uddea Step 3: Add Tests"}),"\n",(0,c.jsxs)(n.p,{children:["Let's add comprehensive tests to our contract. Add the following test functions to your ",(0,c.jsx)(n.code,{children:"counter.move"})," file:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-rust",children:"#[test_only]\nmodule counter::counter_tests {\n    use std::signer;\n    use counter::simple_counter;\n    \n    #[test(account = @0x1)]\n    public fun test_initialize_and_get_count(account: &signer) {\n        simple_counter::initialize(account);\n        let count = simple_counter::get_count(signer::address_of(account));\n        assert!(count == 0, 1);\n    }\n    \n    #[test(account = @0x1)]\n    public fun test_increment(account: &signer) {\n        simple_counter::initialize(account);\n        simple_counter::increment(account);\n        simple_counter::increment(account);\n        \n        let count = simple_counter::get_count(signer::address_of(account));\n        assert!(count == 2, 2);\n    }\n    \n    #[test(account = @0x1)]\n    public fun test_decrement(account: &signer) {\n        simple_counter::initialize(account);\n        simple_counter::increment(account);\n        simple_counter::increment(account);\n        simple_counter::decrement(account);\n        \n        let count = simple_counter::get_count(signer::address_of(account));\n        assert!(count == 1, 3);\n    }\n    \n    #[test(account = @0x1)]\n    public fun test_reset(account: &signer) {\n        simple_counter::initialize(account);\n        simple_counter::increment(account);\n        simple_counter::reset(account);\n        \n        let count = simple_counter::get_count(signer::address_of(account));\n        assert!(count == 0, 4);\n    }\n    \n    #[test(account = @0x1)]\n    public fun test_decrement_underflow_protection(account: &signer) {\n        simple_counter::initialize(account);\n        simple_counter::decrement(account); // Should not panic, just stay at 0\n        \n        let count = simple_counter::get_count(signer::address_of(account));\n        assert!(count == 0, 5);\n    }\n}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"-step-4-compile-and-test",children:"\ud83d\udd28 Step 4: Compile and Test"}),"\n",(0,c.jsx)(n.p,{children:"Now let's compile and test our contract:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"# Navigate to the counter directory\ncd counter\n\n# Compile the contract\ncedra move compile\n\n# Run the tests\ncedra move test\n"})}),"\n",(0,c.jsx)(n.p,{children:"You should see output indicating that all tests passed! \u2705"}),"\n",(0,c.jsx)(n.h2,{id:"-step-5-deploy-to-testnet",children:"\ud83d\ude80 Step 5: Deploy to Testnet"}),"\n",(0,c.jsx)(n.p,{children:"Time to deploy our counter to Cedra testnet:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"cedra move publish\n"})}),"\n",(0,c.jsxs)(n.p,{children:["When prompted, type ",(0,c.jsx)(n.code,{children:"yes"})," to confirm the transaction."]}),"\n",(0,c.jsx)(n.h2,{id:"-step-6-interact-with-your-contract",children:"\ud83c\udfae Step 6: Interact with Your Contract"}),"\n",(0,c.jsxs)(n.p,{children:["Once deployed, let's interact with our counter, and don't forget to use ",(0,c.jsx)(n.em,{children:"module address"})," instead of ",(0,c.jsx)(n.em,{children:"default"}),":"]}),"\n",(0,c.jsx)(n.h3,{id:"initialize-the-counter",children:"Initialize the Counter"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"cedra move run --function-id default::simple_counter::initialize\n"})}),"\n",(0,c.jsx)(n.h3,{id:"increment-the-counter",children:"Increment the Counter"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"cedra move run --function-id default::simple_counter::increment\n"})}),"\n",(0,c.jsx)(n.h3,{id:"check-the-current-value",children:"Check the Current Value"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"cedra move view --function-id default::simple_counter::get_count --args address:default\n"})}),"\n",(0,c.jsx)(n.h3,{id:"increment-a-few-more-times",children:"Increment a Few More Times"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"cedra move run --function-id default::simple_counter::increment\ncedra move run --function-id default::simple_counter::increment\n"})}),"\n",(0,c.jsx)(n.h3,{id:"check-the-value-again",children:"Check the Value Again"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"cedra move view --function-id default::simple_counter::get_count --args address:default\n"})}),"\n",(0,c.jsx)(n.p,{children:"You should see the counter value increasing! \ud83c\udf89"}),"\n",(0,c.jsx)(n.h2,{id:"-understanding-the-code",children:"\ud83e\udde0 Understanding the Code"}),"\n",(0,c.jsx)(n.p,{children:"Let's break down the key concepts:"}),"\n",(0,c.jsxs)(n.h3,{id:"resources-struct-counter-has-key",children:["Resources (",(0,c.jsx)(n.code,{children:"struct Counter has key"}),")"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Resources are Move's way of representing digital assets"}),"\n",(0,c.jsxs)(n.li,{children:["The ",(0,c.jsx)(n.code,{children:"key"})," ability allows the struct to be stored at the top level of an account"]}),"\n",(0,c.jsxs)(n.li,{children:["Our ",(0,c.jsx)(n.code,{children:"Counter"})," resource holds a single ",(0,c.jsx)(n.code,{children:"u64"})," value"]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"entry-functions-public-entry-fun",children:["Entry Functions (",(0,c.jsx)(n.code,{children:"public entry fun"}),")"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Entry functions can be called directly from transactions"}),"\n",(0,c.jsx)(n.li,{children:"They're the public interface of your smart contract"}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"acquires-acquires-counter",children:["Acquires (",(0,c.jsx)(n.code,{children:"acquires Counter"}),")"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Functions that read from or modify global storage must declare what they access"}),"\n",(0,c.jsx)(n.li,{children:"This helps Move's type system prevent many common bugs"}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"global-storage-operations",children:"Global Storage Operations"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"move_to()"}),": Store a resource in an account"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"borrow_global()"}),": Read from global storage"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"borrow_global_mut()"}),": Modify global storage"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"exists<T>()"}),": Check if a resource exists"]}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"view-functions-view",children:["View Functions (",(0,c.jsx)(n.code,{children:"#[view]"}),")"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"View functions are read-only and don't modify state"}),"\n",(0,c.jsx)(n.li,{children:"They can be called without creating a transaction"}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"-next-steps",children:"\ud83c\udfa8 Next Steps"}),"\n",(0,c.jsx)(n.p,{children:"Congratulations! You've built your first Move smart contract on Cedra. Here are some ideas to extend your counter:"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Add a step parameter"})," - Allow incrementing/decrementing by custom amounts"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Multiple counters"})," - Store multiple named counters in one resource"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Access controls"})," - Add admin functions or ownership features"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Events"})," - Emit events when the counter changes"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Counter factory"})," - Create a system for multiple independent counters"]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"-additional-resources",children:"\ud83d\udcda Additional Resources"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"/docs/real-world-guides",children:"Real World Guides"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"/docs/cli/usage",children:"Cedra CLI Usage Guide"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://move-language.github.io/move/",children:"Move Language Documentation"})}),"\n"]}),"\n",(0,c.jsx)(n.admonition,{title:"What's Next?",type:"tip",children:(0,c.jsxs)(n.p,{children:["Ready to build something more complex? Check out our ",(0,c.jsx)(n.a,{href:"/docs/guides/first-fa",children:"Fungible Asset Guide"})," to learn about creating tokens on Cedra! \ud83e\ude99"]})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(6540);const c={},o=r.createContext(c);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);