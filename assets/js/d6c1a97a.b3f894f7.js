"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[1827],{6040:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"indexer/processors","title":"What are Processors","description":"Processors are the core engines that power Cedra\'s indexing infrastructure. They extract, transform, and store blockchain data into structured formats that can be efficiently queried through GraphQL.","source":"@site/docs/indexer/processors.mdx","sourceDirName":"indexer","slug":"/indexer/processors","permalink":"/indexer/processors","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/indexer/processors.mdx","tags":[],"version":"current","frontMatter":{"title":"What are Processors"},"sidebar":"docs","previous":{"title":"SDK Guide","permalink":"/indexer/sdk"},"next":{"title":"Cedra Nodes Overview","permalink":"/nodes/"}}');var i=s(4848),t=s(8453);const o={title:"What are Processors"},a="What are Processors",c={},d=[{value:"What Makes a Processor?",id:"what-makes-a-processor",level:3},{value:"\ud83d\udce6 Events Processor Deep Dive",id:"-events-processor-deep-dive",level:2},{value:"What It Does",id:"what-it-does",level:4},{value:"Configuration",id:"configuration",level:4},{value:"Run the Processor",id:"run-the-processor",level:4},{value:"Data Flow Example",id:"data-flow-example",level:4},{value:"Querying Indexed Events",id:"querying-indexed-events",level:4},{value:"\ud83d\udd04 Processing Modes",id:"-processing-modes",level:2},{value:"<strong>Default Mode</strong> (Bootstrap)",id:"default-mode-bootstrap",level:3},{value:"<strong>Backfill Mode</strong>",id:"backfill-mode",level:3},{value:"<strong>Testing Mode</strong>",id:"testing-mode",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"\ud83d\ude80 <strong>Quick Start</strong>",id:"-quick-start",level:3},{value:"\ud83d\udcda <strong>Learn More</strong>",id:"-learn-more",level:3},{value:"\ud83d\udee0\ufe0f <strong>Build Real Applications</strong>",id:"\ufe0f-build-real-applications",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"what-are-processors",children:"What are Processors"})}),"\n",(0,i.jsx)(n.p,{children:"Processors are the core engines that power Cedra's indexing infrastructure. They extract, transform, and store blockchain data into structured formats that can be efficiently queried through GraphQL."}),"\n",(0,i.jsx)(n.admonition,{title:"Key Concept",type:"info",children:(0,i.jsx)(n.p,{children:"Think of processors as specialized data pipelines - each one designed to handle specific types of blockchain data (events, coins, NFTs, etc.) and transform it into queryable database records."})}),"\n",(0,i.jsx)(n.h3,{id:"what-makes-a-processor",children:"What Makes a Processor?"}),"\n",(0,i.jsx)(n.p,{children:"A processor is a specialized program that:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Connects"})," to Cedra's transaction stream"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extracts"})," specific data from transactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transforms"})," raw data into structured formats"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stores"})," processed data in PostgreSQL"]}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:'graph LR\n    subgraph "Cedra Network"\n        CN[\ud83d\udd17 Cedra Nodes]\n        TS[\ud83d\udce1 Stream]\n    end\n    \n    subgraph "Processor"\n        E[\ud83d\udd0d Extract]\n        T[\u2699\ufe0f Transform]\n        L[\ud83d\udcbe Load/Store]\n    end\n    \n    subgraph "Storage"\n        PG[(PostgreSQL)]\n        GQL[GraphQL API]\n    end\n    \n    CN --\x3e|Transactions| TS\n    TS --\x3e|Stream| E\n    E --\x3e T\n    T --\x3e L\n    L --\x3e PG\n    PG --\x3e GQL\n    \n    style CN fill:#e3f2fd\n    style TS fill:#e3f2fd\n    style E fill:#fff3e0\n    style T fill:#fff3e0\n    style L fill:#fff3e0\n    style PG fill:#e8f5e9\n    style GQL fill:#f3e5f5'}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-events-processor-deep-dive",children:"\ud83d\udce6 Events Processor Deep Dive"}),"\n",(0,i.jsxs)(n.p,{children:["Let's explore the ",(0,i.jsx)(n.strong,{children:"Events Processor"})," - the most commonly used processor that indexes all blockchain events."]}),"\n",(0,i.jsx)(n.h4,{id:"what-it-does",children:"What It Does"}),"\n",(0,i.jsx)(n.p,{children:"The Events Processor captures EVERY event emitted on the Cedra blockchain:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Smart contract events (swaps, mints, burns)"}),"\n",(0,i.jsx)(n.li,{children:"System events (staking, governance)"}),"\n",(0,i.jsx)(n.li,{children:"Custom protocol events"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Using the ",(0,i.jsx)(n.a,{href:"https://github.com/cedra-labs/cedra-indexer-processors-v2",children:"cedra-indexer-processors-v2"})," repository:"]}),"\n",(0,i.jsx)(n.h4,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"config.yaml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'health_check_port: 8084\n\nprocessor_config:\n  type: "events_processor"\n  channel_size: 1000\n\nprocessor_mode:\n  type: default\n  initial_starting_version: 0\n\ntransaction_stream_config:\n  indexer_grpc_data_service_address: "GRPC_ADDRESS"\n  request_name_header: "events-processor"\n\ndb_config:\n  postgres_connection_string: "postgresql://localhost:5432/cedra_events"\n'})}),"\n",(0,i.jsx)(n.h4,{id:"run-the-processor",children:"Run the Processor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Clone the repository\ngit clone https://github.com/cedra-labs/cedra-indexer-processors-v2\ncd cedra-indexer-processors-v2/processor\n\n# Build and run\ncargo run --release -- -c config.yaml\n"})}),"\n",(0,i.jsx)(n.h4,{id:"data-flow-example",children:"Data Flow Example"}),"\n",(0,i.jsx)(n.p,{children:"Here's how an event flows through the system:"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant SC as Smart Contract\n    participant CN as Cedra Node\n    participant EP as Events Processor\n    participant PG as PostgreSQL\n    participant GQL as GraphQL API\n    participant App as Your App\n    \n    SC->>CN: Emit SwapEvent\n    CN->>EP: Stream Transaction\n    EP->>EP: Extract Event\n    EP->>EP: Transform to Schema\n    EP->>PG: INSERT INTO events\n    App->>GQL: query { events }\n    GQL->>PG: SELECT * FROM events\n    PG->>GQL: Event Data\n    GQL->>App: JSON Response"}),"\n",(0,i.jsx)(n.h4,{id:"querying-indexed-events",children:"Querying Indexed Events"}),"\n",(0,i.jsx)(n.p,{children:"Once the processor is running, query your events via GraphQL. Here's an example for tracking token activities:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"# Query at https://graphql.cedra.dev/v1/graphql\nquery GetTokenActivity($token_id: String!, $limit: Int!) {\n  token_activities_v2(\n    where: { token_data_id: { _eq: $token_id }}\n    order_by: { transaction_timestamp: desc }\n    limit: $limit\n  ) {\n    transaction_version\n    from_address\n    to_address\n    token_amount\n    type\n    transaction_timestamp\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcd6 ",(0,i.jsx)(n.strong,{children:"See more examples:"})," Check out our ",(0,i.jsx)(n.a,{href:"/indexer/common-queries",children:"Common Queries"})," guide for ready-to-use GraphQL queries for wallets, NFTs, analytics, and more."]}),"\n",(0,i.jsx)(n.h2,{id:"-processing-modes",children:"\ud83d\udd04 Processing Modes"}),"\n",(0,i.jsx)(n.p,{children:"Processors can run in three different modes, each serving a specific purpose:"}),"\n",(0,i.jsxs)(n.h3,{id:"default-mode-bootstrap",children:[(0,i.jsx)(n.strong,{children:"Default Mode"})," (Bootstrap)"]}),"\n",(0,i.jsx)(n.p,{children:"The standard mode for continuous indexing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"processor_mode:\n  type: default\n  initial_starting_version: 0  # Start from genesis\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["First run: Starts from ",(0,i.jsx)(n.code,{children:"initial_starting_version"})]}),"\n",(0,i.jsxs)(n.li,{children:["Restarts: Resumes from last checkpoint in ",(0,i.jsx)(n.code,{children:"processor_status"})," table"]}),"\n",(0,i.jsx)(n.li,{children:"Use case: Production indexing"}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.strong,{children:"View Default Mode Flow"})}),(0,i.jsx)(n.mermaid,{value:"graph TD\n    Start[Processor Starts] --\x3e Check{First Run?}\n    Check --\x3e|Yes| Begin[Start from initial_version]\n    Check --\x3e|No| Resume[Resume from checkpoint]\n    Begin --\x3e Process[Process Transactions]\n    Resume --\x3e Process\n    Process --\x3e Save[Save Checkpoint]\n    Save --\x3e Process"})]}),"\n",(0,i.jsx)(n.h3,{id:"backfill-mode",children:(0,i.jsx)(n.strong,{children:"Backfill Mode"})}),"\n",(0,i.jsx)(n.p,{children:"For reprocessing historical data or fixing issues:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'processor_mode:\n  type: backfill\n  backfill_id: "fix_missing_events_v1"  # Unique identifier\n  initial_starting_version: 1000000\n  ending_version: 2000000\n  overwrite_checkpoint: false  # Set true to restart\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Processes specific version range"}),"\n",(0,i.jsxs)(n.li,{children:["Tracks progress separately in ",(0,i.jsx)(n.code,{children:"backfill_processor_status"})]}),"\n",(0,i.jsx)(n.li,{children:"Won't interfere with main processor"}),"\n",(0,i.jsx)(n.li,{children:"Use case: Data corrections, adding new indexes"}),"\n"]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(n.strong,{children:"When to Use Backfill"})}),(0,i.jsx)(n.p,{children:"Use backfill mode when you need to:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\ud83d\udd27 Fix data inconsistencies"}),"\n",(0,i.jsx)(n.li,{children:"\ud83d\udcca Add new derived metrics"}),"\n",(0,i.jsx)(n.li,{children:"\ud83d\udd0d Reindex with updated logic"}),"\n",(0,i.jsx)(n.li,{children:"\ud83d\udcc8 Process missed transactions"}),"\n"]}),(0,i.jsx)(n.p,{children:"Example scenario: You updated your processor to extract additional fields from events. Use backfill to reprocess historical data with the new logic."})]}),"\n",(0,i.jsx)(n.h3,{id:"testing-mode",children:(0,i.jsx)(n.strong,{children:"Testing Mode"})}),"\n",(0,i.jsx)(n.p,{children:"For development and debugging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"processor_mode:\n  type: testing\n  override_starting_version: 5000000\n  ending_version: 5000100  # Optional, defaults to single transaction\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How it works:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Processes specific transactions"}),"\n",(0,i.jsx)(n.li,{children:"Does NOT update checkpoints"}),"\n",(0,i.jsx)(n.li,{children:"Perfect for debugging"}),"\n",(0,i.jsx)(n.li,{children:"Use case: Testing new extraction logic"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you understand processors:"}),"\n",(0,i.jsxs)(n.h3,{id:"-quick-start",children:["\ud83d\ude80 ",(0,i.jsx)(n.strong,{children:"Quick Start"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Clone ",(0,i.jsx)(n.a,{href:"https://github.com/cedra-labs/cedra-indexer-processors-v2",children:"cedra-indexer-processors-v2"})]}),"\n",(0,i.jsx)(n.li,{children:"Start with the events processor for comprehensive data"}),"\n",(0,i.jsx)(n.li,{children:"Configure your database connection"}),"\n",(0,i.jsxs)(n.li,{children:["Query via ",(0,i.jsx)(n.a,{href:"https://cloud.hasura.io/public/graphiql?endpoint=https://graphql.cedra.dev/v1/graphql",children:"GraphQL Playground"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"-learn-more",children:["\ud83d\udcda ",(0,i.jsx)(n.strong,{children:"Learn More"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/indexer/how-it-works",children:"How Indexing Works"})})," - Understand the complete data pipeline"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/indexer/sdk",children:"SDK Guide"})})," - Quick start with processors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/indexer/common-queries",children:"Common Queries"})})," - Ready-to-use GraphQL patterns"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"\ufe0f-build-real-applications",children:["\ud83d\udee0\ufe0f ",(0,i.jsx)(n.strong,{children:"Build Real Applications"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/guides/dex",children:"Build a DEX"})})," - Use processors for swap tracking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/guides/first-nft",children:"NFT Platform"})})," - Index NFT collections and trades"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/guides/first-fa",children:"Fungible Assets"})})," - Track token balances and transfers"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);