"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[8762],{1139:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"guides/first-nft","title":"NFT Contract  -  Full Code Walkthrough","description":"Before starting this guide, make sure you have:","source":"@site/docs/guides/first-nft.md","sourceDirName":"guides","slug":"/guides/first-nft","permalink":"/guides/first-nft","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/guides/first-nft.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Fungible Asset (FA) End-to-End Guide","permalink":"/guides/first-fa"},"next":{"title":"Build a Fee Splitter Contract","permalink":"/guides/fee-splitter"}}');var s=t(4848),r=t(8453);const o={},l="NFT Contract  -  Full Code Walkthrough",c={},a=[{value:"1. Module header\xa0&amp;\xa0imports",id:"1-module-headerimports",level:2},{value:"2. Initialization &amp; collection setup",id:"2-initialization--collection-setup",level:2},{value:"3. Creator\u2011gated mint",id:"3-creatorgated-mint",level:2},{value:"5. Transfer NFT",id:"5-transfer-nft",level:2},{value:"6. Read\u2011only helpers",id:"6-readonly-helpers",level:2},{value:"6.1 Get collection owner",id:"61-get-collection-owner",level:3},{value:"6.2 Check collection existence",id:"62-check-collection-existence",level:3},{value:"6.3 Get collection metadata",id:"63-get-collection-metadata",level:3},{value:"7. Let&#39;s use it!",id:"7-lets-use-it",level:2},{value:"6. Next steps",id:"6-next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nft-contract-----full-code-walkthrough",children:"NFT Contract  -  Full Code Walkthrough"})}),"\n",(0,s.jsxs)(n.admonition,{title:"Prerequisites",type:"tip",children:[(0,s.jsx)(n.p,{children:"Before starting this guide, make sure you have:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.a,{href:"/getting-started/libs",children:"Installed Rust and Node.js"})," - Required for development toolchain"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.a,{href:"/getting-started/cli",children:"Installed the Cedra CLI"})," - Essential for deploying contracts"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.a,{href:"/getting-started/faucet",children:"Obtained test tokens from the faucet"})," - Needed for deployment gas"]}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"What is an NFT?"})," A ",(0,s.jsx)(n.em,{children:"Non\u2011Fungible Token"})," is a unique, indivisible on\u2011chain object whose immutable identity and metadata distinguish it from all other tokens. Think digital collectibles, tickets, or game items - as opposed to interchangeable fungible coins."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Goal"}),": Understand ",(0,s.jsx)(n.em,{children:"exactly"})," how this NFT contract works on\u2011chain and how to call it from a TypeScript client."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Scope\xa0\u2013 What you\u2019ll learn"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Create an  ",(0,s.jsx)(n.strong,{children:"NFT collection"})," on Cedra"]}),"\n",(0,s.jsxs)(n.li,{children:["Mint single\xa0",(0,s.jsx)(n.strong,{children:"NFTs"})," into that collection"]}),"\n",(0,s.jsxs)(n.li,{children:["Transfer NFTs between accounts and understand ",(0,s.jsx)(n.strong,{children:"ownership"})," flow"]}),"\n",(0,s.jsxs)(n.li,{children:["Query on\u2011chain collection & ",(0,s.jsx)(n.strong,{children:"token metadata"})]}),"\n",(0,s.jsxs)(n.li,{children:["Map each action to the underlying Move code and ",(0,s.jsx)(n.strong,{children:"access\u2011control checks"})]}),"\n",(0,s.jsx)(n.li,{children:"Extend the contract with burns, royalties, or mutable metadata"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.mdxAdmonitionTitle,{children:[(0,s.jsx)(n.strong,{children:"Source code"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/cedra-labs/move-contract-examples/tree/main/nft-example",children:"GitHub \u2013 NFT module"})]})}),"\n",(0,s.jsxs)(n.admonition,{title:"Move Concepts Applied",type:"info",children:[(0,s.jsx)(n.p,{children:"This NFT implementation demonstrates key Move concepts:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/move/resource",children:"Resource Safety"})})," - NFTs are unique resources that can't be duplicated"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/move/modules",children:"Module Organization"})})," - Clean separation of initialization, minting, and transfer logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/move/functions#view-functions",children:"View Functions"})})," - Gas-free queries for collection data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/move/errors#the-anatomy-of-good-error-handling",children:"Access Control"})})," - Creator-only minting with assert checks"]}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"1-module-headerimports",children:"1. Module header\xa0&\xa0imports"}),"\n",(0,s.jsxs)(n.p,{children:["Below is the ",(0,s.jsx)(n.strong,{children:"module declaration"})," and its set of ",(0,s.jsx)(n.code,{children:"use"})," statements. The module name binds the contract to the publisher\u2019s address, while each ",(0,s.jsx)(n.code,{children:"use"})," line imports the types and helpers we rely on throughout the rest of the file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"module CedraNFT::CedraCollection {\n    use cedra_framework::object::{Self, Object};\n    use cedra_token_objects::collection;\n    use cedra_token_objects::token;\n    use std::string::{Self, String};\n    use std::option;\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"cedra_framework::object"})," \u2013 low\u2011level helpers for creating, transferring, or dereferencing ",(0,s.jsx)(n.code,{children:"Object<T>"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"collection / token"})," \u2013 the Digital\xa0Asset primitives."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"std::string / std::option"})," \u2013 UTF\u20118 and optional value utilities."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Pro Tip",type:"tip",children:(0,s.jsxs)(n.p,{children:["Each ",(0,s.jsx)(n.code,{children:"use"})," statement imports specific functionality - think of it as your toolkit for building NFTs!"]})}),"\n",(0,s.jsx)(n.h2,{id:"2-initialization--collection-setup",children:"2. Initialization & collection setup"}),"\n",(0,s.jsxs)(n.p,{children:["When the module is published, Cedra automatically invokes a tiny initializer that spins up the NFT ",(0,s.jsx)(n.strong,{children:"collection container"})," in the very same transaction. This ensures the collection exists before any minting logic is executed."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"fun init_module(admin: &signer) {\n    create_collection(admin);\n}\n\npublic entry fun create_collection(creator: &signer) {\n    let name        = string::utf8(COLLECTION_NAME);\n    let description = string::utf8(COLLECTION_DESCRIPTION);\n    let uri         = string::utf8(COLLECTION_URI);\n\n    collection::create_unlimited_collection(\n        creator,          // signer / future owner\n        description,\n        name,\n        option::none(),   // optional royalty struct (none for now)\n        uri,\n    );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key factors"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Everything happens inside the ",(0,s.jsx)(n.code,{children:"move publish"})," transaction - no follow\u2011up calls."]}),"\n",(0,s.jsxs)(n.li,{children:["The publisher\u2019s signer becomes the ",(0,s.jsx)(n.strong,{children:"collection owner"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Uses ",(0,s.jsx)(n.code,{children:"create_unlimited_collection"}),", so the supply is unbounded."]}),"\n",(0,s.jsxs)(n.li,{children:["No royalties yet (",(0,s.jsx)(n.code,{children:"option::none()"}),"), leaving room for your upgrades."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Quick Insight",type:"info",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"init_module"})," function runs automatically when you publish your contract. This means your collection is ready to use immediately after deployment - no extra setup required!"]})}),"\n",(0,s.jsx)(n.h2,{id:"3-creatorgated-mint",children:"3. Creator\u2011gated mint"}),"\n",(0,s.jsx)(n.p,{children:"Allows the collection creator to mint a single\u2011supply NFT and immediately hand it to any recipient address. Under the hood, it:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Confirms the caller is the collection owner"}),"\n",(0,s.jsxs)(n.li,{children:["Converts the collection name constant from bytes to ",(0,s.jsx)(n.code,{children:"String"})]}),"\n",(0,s.jsxs)(n.li,{children:["Calls ",(0,s.jsx)(n.code,{children:"token::create_named_token"})," with ",(0,s.jsx)(n.code,{children:"supply = 1"})," to mint a unique token"]}),"\n",(0,s.jsxs)(n.li,{children:["Uses ",(0,s.jsx)(n.code,{children:"object::transfer"})," to deliver the NFT to recipient"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"public entry fun mint_nft(\n    creator: &signer,\n    to: address,\n    name: String,\n    description: String,\n    uri: String,\n) {\n    let expected_creator = signer::address_of(creator);\n    assert!(expected_creator == signer::address_of(creator), ENOT_CREATOR);\n\n    let collection_name = string::utf8(COLLECTION_NAME);\n\n    let token_obj = token::create_named_token(\n        creator,\n        collection_name,\n        name,\n        description,\n        1,\n        0,\n        uri,\n        option::none(),\n    );\n\n    object::transfer(token_obj, to);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key factors"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Caller must be the original collection owner otherwise, aborts with ",(0,s.jsx)(n.code,{children:"ENOT_CREATOR"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"supply = 1"})," enforces non\u2011fungible uniqueness."]}),"\n",(0,s.jsx)(n.li,{children:"Immediately transfers ownership, so the NFT never sits in the creator\u2019s account."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Security Note",type:"warning",children:(0,s.jsxs)(n.p,{children:["Notice the ",(0,s.jsx)(n.code,{children:"assert!"})," check? This prevents unauthorized minting. Only the original collection creator can mint new NFTs - this is your access control in action!"]})}),"\n",(0,s.jsx)(n.h2,{id:"5-transfer-nft",children:"5. Transfer NFT"}),"\n",(0,s.jsxs)(n.p,{children:["A thin wrapper around ",(0,s.jsx)(n.code,{children:"object::transfer"})," that moves an existing NFT object from the signer to a new owner."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"public entry fun transfer_nft(\n    from: &signer,\n    object: Object<token::Token>,\n    to: address,\n) {\n    object::transfer(object, to);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key factors"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Signer (",(0,s.jsx)(n.code,{children:"from"}),") must own ",(0,s.jsx)(n.code,{children:"object"}),", or the transaction aborts with the framework\u2019s permission error."]}),"\n",(0,s.jsx)(n.li,{children:"Reuses the object system\u2019s built\u2011in permission checks - no custom logic required."}),"\n",(0,s.jsx)(n.li,{children:"Returns nothing; success means the object has already changed hands on\u2011chain."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Gas Saver",type:"tip",children:(0,s.jsx)(n.p,{children:"Transfers use Move's built-in object system, which handles all the ownership validation for you. This means secure transfers with minimal gas costs!"})}),"\n",(0,s.jsx)(n.h2,{id:"6-readonly-helpers",children:"6. Read\u2011only helpers"}),"\n",(0,s.jsxs)(n.p,{children:["Each helper is annotated with ",(0,s.jsx)(n.code,{children:"#[view]"}),", meaning it can be executed  without gas fees. They expose collection ownership, existence, and metadata in a lightweight and predictable manner."]}),"\n",(0,s.jsx)(n.h3,{id:"61-get-collection-owner",children:"6.1 Get collection owner"}),"\n",(0,s.jsx)(n.p,{children:"Returns the address that currently owns the collection object."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[view]\npublic fun get_collection_owner(creator_addr: address): address {\n    let name = string::utf8(COLLECTION_NAME);\n    let coll_addr = collection::create_collection_address(&creator_addr, &name);\n    let obj = object::address_to_object<collection::Collection>(coll_addr);\n    object::owner(obj)\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key factors"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Deterministically reconstructs the collection address from ",(0,s.jsx)(n.code,{children:"creator_addr"})," + constant name."]}),"\n",(0,s.jsxs)(n.li,{children:["Converts the address into an ",(0,s.jsx)(n.code,{children:"Object<collection::Collection>"})," to invoke ",(0,s.jsx)(n.code,{children:"object::owner"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"62-check-collection-existence",children:"6.2 Check collection existence"}),"\n",(0,s.jsx)(n.p,{children:"Boolean guard that prevents aborts when dereferencing a non\u2011existent collection."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[view]\npublic fun collection_exists(creator_addr: address): bool {\n    let name = string::utf8(COLLECTION_NAME);\n    let coll_addr = collection::create_collection_address(&creator_addr, &name);\n    object::exists_at<collection::Collection>(coll_addr)\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key factors"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Same deterministic address calculation as above."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"object::exists_at"})," returns ",(0,s.jsx)(n.code,{children:"false"})," instead of aborting, make it safe for front\u2011end checks."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"63-get-collection-metadata",children:"6.3 Get collection metadata"}),"\n",(0,s.jsx)(n.p,{children:"Fetches the collection\u2019s name, description, and URI, or empty strings if the collection hasn\u2019t been created."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[view]\npublic fun get_collection_data(creator_addr: address): (String, String, String) {\n    if (collection_exists(creator_addr)) {\n        let name = string::utf8(COLLECTION_NAME);\n        let coll_addr = collection::create_collection_address(&creator_addr, &name);\n        let obj = object::address_to_object<collection::Collection>(coll_addr);\n        (\n            collection::name(obj),\n            collection::description(obj),\n            collection::uri(obj),\n        )\n    } else {\n        (string::utf8(b""), string::utf8(b""), string::utf8(b"")) }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key factors"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Call ",(0,s.jsx)(n.code,{children:"collection_exists"})," first to avoid aborts."]}),"\n",(0,s.jsx)(n.li,{children:"Returns three empty strings as a defined fallback when the collection is missing."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Developer Friendly",type:"note",children:(0,s.jsxs)(n.p,{children:["These ",(0,s.jsx)(n.code,{children:"#[view]"})," functions are free to call! Use them liberally in your frontend to check state without spending gas."]})}),"\n",(0,s.jsx)(n.h2,{id:"7-lets-use-it",children:"7. Let's use it!"}),"\n",(0,s.jsxs)(n.p,{children:["Here\u2019s a step\u2011by\u2011step TypeScript example that exercises the entire contract lifecycle - connect, auto\u2011create the collection (via ",(0,s.jsx)(n.code,{children:"init_module"}),"), mint an NFT, transfer it, and finally query on\u2011chain metadata. Replace the ",(0,s.jsx)(n.code,{children:"0x\u2026"})," placeholders with your own keys and object IDs before running."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import {\n  Aptos, AptosConfig, Account, Network,\n  PrivateKey, PrivateKeyVariants\n} from "@cedra-labs/ts-sdk";\n\nconst config = new AptosConfig({ network: Network.TESTNET });\nconst cedra = new Cedra(config);\n\n// Replace with real keys in practice (use env vars!)\nconst deployerKey = PrivateKey.formatPrivateKey(\n  "0x\u2026", PrivateKeyVariants.Ed25519\n);\nconst creator = Account.fromPrivateKey({ privateKey: deployerKey });\nconst alice   = Account.generate();\nconst bob     = Account.generate();\n\nconst MODULE = `${creator.accountAddress}::CedraCollectionV2`;\n\n// 1. Mint NFT to Alice\nawait cedra.view({\n  account: creator,\n  function: `${MODULE}::mint_nft`,\n  arguments: [\n    alice.accountAddress,\n    "Rare Cedra Dragon #42",\n    "A legendary dragon",\n    "https://metadata.cedra.dev/dragons/42.json",\n  ],\n});\n\n// 2. Alice transfers to Bob\nconst tokenHandle = "0x...object-id...";\nawait cedra.view({\n  account: alice,\n  function: `${MODULE}::transfer_nft`,\n  arguments: [ tokenHandle, bob.accountAddress ],\n});\n\nconsole.log("\u2713 transfer complete");\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Before You Run",type:"caution",children:(0,s.jsx)(n.p,{children:"Remember to replace the placeholder keys and addresses with real values! For production, always use environment variables to store private keys securely."})}),"\n",(0,s.jsx)(n.h2,{id:"6-next-steps",children:"6. Next steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Add royalties (",(0,s.jsx)(n.code,{children:"cedra_token_objects::royalty"}),") in ",(0,s.jsx)(n.code,{children:"create_collection"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Provide ",(0,s.jsx)(n.code,{children:"burn_nft"})," via ",(0,s.jsx)(n.code,{children:"token::burn"})," + ",(0,s.jsx)(n.code,{children:"object::destroy"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.code,{children:"mutate_uri"})," with a ",(0,s.jsx)(n.code,{children:"MutatorRef"})," for mutable metadata."]}),"\n",(0,s.jsxs)(n.li,{children:["Check other examples in ",(0,s.jsx)(n.a,{href:"/real-world-guides",children:"Real World Guides"})," page."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);