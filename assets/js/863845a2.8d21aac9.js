"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[2788],{7434:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"indexer/common-queries","title":"Common Queries","description":"Find the right GraphQL queries for what you\'re building. Each section includes complete queries organized by common development scenarios.","source":"@site/docs/indexer/common-queries.mdx","sourceDirName":"indexer","slug":"/indexer/common-queries","permalink":"/indexer/common-queries","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/indexer/common-queries.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"\ud83d\ude80 Cedra Indexer","permalink":"/indexer/"},"next":{"title":"SDK Guide","permalink":"/indexer/sdk"}}');var i=s(4848),r=s(8453);const a={},l="Common Queries",c={},d=[{value:"\ud83d\udc5b Building a Wallet?",id:"-building-a-wallet",level:2},{value:"\ud83c\udfea Building an NFT Platform?",id:"-building-an-nft-platform",level:2},{value:"\ud83d\udcca Building Analytics?",id:"-building-analytics",level:2},{value:"\ud83d\udd27 Query Patterns",id:"-query-patterns",level:2},{value:"\ud83d\udd0d Query Operators",id:"-query-operators",level:2},{value:"\ud83d\udca1 Pro Tips from the Trenches",id:"-pro-tips-from-the-trenches",level:2},{value:"\ud83d\udcda Keep Exploring",id:"-keep-exploring",level:2}];function o(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...n.components},{Details:s}=e;return s||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"common-queries",children:"Common Queries"})}),"\n",(0,i.jsx)(e.p,{children:"Find the right GraphQL queries for what you're building. Each section includes complete queries organized by common development scenarios."}),"\n",(0,i.jsx)(e.admonition,{title:"\ud83d\ude80 Quick Start",type:"tip",children:(0,i.jsxs)(e.p,{children:["Test these queries directly in the ",(0,i.jsx)(e.a,{href:"https://cloud.hasura.io/public/graphiql?endpoint=https://graphql.cedra.dev/v1/graphql",children:"GraphQL Playground"})]})}),"\n",(0,i.jsx)(e.h2,{id:"-building-a-wallet",children:"\ud83d\udc5b Building a Wallet?"}),"\n",(0,i.jsx)(e.p,{children:"Essential queries for wallet applications, portfolio trackers, and account management tools."}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Get Account Balances"})}),(0,i.jsx)(e.p,{children:"Retrieve all fungible asset balances for an address. This query displays a user's complete portfolio including tokens and coins."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:'query GetAccountBalances($address: String!) {\n  current_fungible_asset_balances_new(\n    where: {\n      owner_address: { _eq: $address }\n      amount: { _gt: "0" }  # Filter out zero balances\n    }\n    order_by: { amount: desc }  # Largest balances first\n  ) {\n    storage_id              # Storage identifier\n    owner_address           # The wallet address\n    asset_type             # Type of the asset\n    amount                 # Raw amount (remember to handle decimals)\n    last_transaction_timestamp  # When balance last changed\n    last_transaction_version    # Last transaction that modified balance\n    token_standard         # Token standard used\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "address": "0x1"\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Sample Response:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "data": {\n    "current_fungible_asset_balances_new": [\n      {\n        "storage_id": "0x123abc",\n        "owner_address": "0x1",\n        "asset_type": "0x1::cedra_coin::CedraCoin",\n        "amount": "1000000000",\n        "last_transaction_timestamp": "2024-01-15T10:30:00",\n        "last_transaction_version": "123456789",\n        "token_standard": "v1"\n      }\n    ]\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["The ",(0,i.jsx)(e.code,{children:"asset_type"})," field identifies the specific token or coin"]}),"\n",(0,i.jsx)(e.li,{children:"Remember to handle decimal places based on the asset type"}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"token_standard"})," to determine how to process the asset"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Get Account Transactions"})}),(0,i.jsx)(e.p,{children:"Fetch transaction history with summary statistics for an account. Essential for activity tracking and analytics."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query GetAccountTransactions($address: String!, $limit: Int!) {\n  account_transactions(\n    where: {account_address: {_eq: $address}}\n    order_by: {transaction_version: desc}\n    limit: $limit\n  ) {\n    transaction_version\n    account_address\n  }\n  account_transactions_aggregate(where: {account_address: {_eq: $address}}) {\n    aggregate {\n      count(columns: account_address)\n      max {\n        transaction_version\n      }\n    }\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "address": "0x1",\n  "limit": 20\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Sample Response:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "data": {\n    "account_transactions": [\n      {\n        "transaction_version": "999999999",\n        "account_address": "0x1"\n      },\n      {\n        "transaction_version": "999999998",\n        "account_address": "0x1"\n      }\n    ],\n    "account_transactions_aggregate": {\n      "aggregate": {\n        "count": 1542,\n        "max": {\n          "transaction_version": "999999999"\n        }\n      }\n    }\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Use the aggregate count to show total transaction history"}),"\n",(0,i.jsx)(e.li,{children:"Implement cursor-based pagination using transaction_version for better performance"}),"\n",(0,i.jsx)(e.li,{children:"Consider caching aggregate data as it changes less frequently"}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Get Fungible Asset Activities"})}),(0,i.jsx)(e.p,{children:"Track fungible asset activities for an address, including transfers, mints, and burns."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query GetFungibleAssetActivities($address: String!, $limit: Int!) {\n  fungible_asset_activities(\n    where: {\n      _or: [\n        { owner_address: { _eq: $address }}\n      ]\n    }\n    order_by: { transaction_timestamp: desc }\n    limit: $limit\n  ) {\n    transaction_version      # Unique transaction identifier\n    event_index             # Event index in the transaction\n    owner_address           # Address involved in activity\n    asset_type             # Type of fungible asset\n    amount                 # Amount transferred\n    type                   # Activity type (e.g., deposit, withdraw)\n    is_frozen              # Whether the asset is frozen\n    transaction_timestamp  # When the activity occurred\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "address": "0x1",\n  "limit": 20\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Sample Response:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "data": {\n    "fungible_asset_activities": [\n      {\n        "transaction_version": "999999999",\n        "event_index": "0",\n        "owner_address": "0x1",\n        "asset_type": "0x1::cedra_coin::CedraCoin",\n        "amount": "1000000",\n        "type": "0x1::fungible_asset::DepositEvent",\n        "is_frozen": false,\n        "transaction_timestamp": "2024-01-15T10:30:00"\n      }\n    ]\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"type"})," field to identify deposit, withdraw, mint, or burn events"]}),"\n",(0,i.jsxs)(e.li,{children:["The ",(0,i.jsx)(e.code,{children:"asset_type"})," field supports all fungible assets, not just coins"]}),"\n",(0,i.jsxs)(e.li,{children:["Check ",(0,i.jsx)(e.code,{children:"is_frozen"})," to determine if the asset can be transferred"]}),"\n",(0,i.jsxs)(e.li,{children:["Filter results by ",(0,i.jsx)(e.code,{children:"asset_type"})," to track specific tokens"]}),"\n"]})]}),"\n",(0,i.jsx)(e.h2,{id:"-building-an-nft-platform",children:"\ud83c\udfea Building an NFT Platform?"}),"\n",(0,i.jsx)(e.p,{children:"Queries for NFT marketplaces, galleries, and collection explorers."}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Display User's NFT Collection"})}),(0,i.jsx)(e.p,{children:"Get all NFTs owned by an address."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:'query GetUserNFTs($owner: String!) {\n  current_token_ownerships_v2(\n    where: {\n      owner_address: { _eq: $owner }\n      amount: { _gt: "0" }  # Only owned NFTs\n    }\n    order_by: { last_transaction_timestamp: desc }\n  ) {\n    token_data_id              # Unique NFT identifier\n    amount                     # Number owned (for editions)\n    property_version_v1        # Property version\n    storage_id                 # Storage identifier\n    table_type_v1             # Table type\n    is_fungible_v2            # Whether token is fungible\n    is_soulbound_v2           # Whether token is soulbound\n    last_transaction_timestamp # When last changed\n    last_transaction_version   # Last transaction version\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "owner": "0x1"\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Sample Response:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "data": {\n    "current_token_ownerships_v2": [\n      {\n        "token_data_id": "0x123abc456def",\n        "amount": "1",\n        "property_version_v1": "0",\n        "storage_id": "0xstorage123",\n        "table_type_v1": null,\n        "is_fungible_v2": false,\n        "is_soulbound_v2": false,\n        "last_transaction_timestamp": "2024-01-15T10:30:00",\n        "last_transaction_version": "999999999"\n      }\n    ]\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["The ",(0,i.jsx)(e.code,{children:"token_data_id"})," uniquely identifies each NFT"]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"is_fungible_v2"})," to distinguish between NFTs and fungible tokens"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"is_soulbound_v2"})," indicates if the NFT can be transferred"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Get Collection Details"})}),(0,i.jsx)(e.p,{children:"Retrieve collection metadata and statistics."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query GetCollectionInfo($collection_id: String!) {\n  current_collections_v2(\n    where: { collection_id: { _eq: $collection_id }}\n  ) {\n    collection_id           # Unique collection identifier\n    collection_name         # Collection name\n    creator_address        # Collection creator\n    description           # Collection description\n    uri                  # Collection metadata URI\n    current_supply       # Currently minted\n    max_supply          # Maximum possible supply\n    total_minted_v2     # Total ever minted\n    mutable_description # Can description be changed\n    mutable_uri        # Can URI be changed\n    token_standard     # Token standard used\n    last_transaction_timestamp\n    last_transaction_version\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "collection_id": "0xcollection123"\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Sample Response:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "data": {\n    "current_collections_v2": [\n      {\n        "collection_id": "0xcollection123",\n        "collection_name": "Cedra Punks",\n        "creator_address": "0xcreator",\n        "description": "A collection of unique Cedra Punks",\n        "uri": "https://metadata.cedrapunks.com/collection",\n        "current_supply": "5000",\n        "max_supply": "10000",\n        "total_minted_v2": "5000",\n        "mutable_description": false,\n        "mutable_uri": false,\n        "token_standard": "v2",\n        "last_transaction_timestamp": "2024-01-15T10:30:00",\n        "last_transaction_version": "999999999"\n      }\n    ]\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"collection_id"})," as the unique identifier for collections"]}),"\n",(0,i.jsxs)(e.li,{children:["Check ",(0,i.jsx)(e.code,{children:"mutable_description"})," and ",(0,i.jsx)(e.code,{children:"mutable_uri"})," to see if metadata can change"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"current_supply"})," vs ",(0,i.jsx)(e.code,{children:"total_minted_v2"}),": current is active NFTs, total includes burned"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Verify NFT Ownership"})}),(0,i.jsx)(e.p,{children:"Check if an address owns a specific NFT."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:'query CheckNFTOwnership($owner: String!, $token_id: String!) {\n  current_token_ownerships_v2(\n    where: {\n      owner_address: { _eq: $owner }\n      token_data_id: { _eq: $token_id }\n      amount: { _gt: "0" }\n    }\n  ) {\n    amount                        # How many they own\n    last_transaction_timestamp    # When acquired\n    last_transaction_version      # Transaction that gave ownership\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "owner": "0x1",\n  "token_id": "0xtoken123"\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Sample Response:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "data": {\n    "current_token_ownerships_v2": [\n      {\n        "amount": "1",\n        "last_transaction_timestamp": "2024-01-15T10:30:00",\n        "last_transaction_version": "999999999"\n      }\n    ]\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"An empty result means the address doesn't own the NFT"}),"\n",(0,i.jsxs)(e.li,{children:["The ",(0,i.jsx)(e.code,{children:"amount"})," field shows how many editions they own (usually 1 for NFTs)"]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"last_transaction_version"})," to track when ownership was acquired"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Track NFT Activity"})}),(0,i.jsx)(e.p,{children:"Get transfer history and activity for NFTs."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query GetNFTActivity($token_id: String!, $limit: Int!) {\n  token_activities_v2(\n    where: { token_data_id: { _eq: $token_id }}\n    order_by: { transaction_timestamp: desc }\n    limit: $limit\n  ) {\n    transaction_version     # Transaction ID\n    event_index            # Event index in transaction\n    from_address          # Previous owner\n    to_address           # New owner\n    token_amount         # Amount transferred\n    type                # Activity type\n    transaction_timestamp # When it happened\n    entry_function_id_str # Function that triggered it\n    property_version_v1  # Property version\n    is_fungible_v2      # Is token fungible\n    token_standard      # Token standard\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "token_id": "0xtoken123",\n  "limit": 10\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Sample Response:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "data": {\n    "token_activities_v2": [\n      {\n        "transaction_version": "999999999",\n        "event_index": "0",\n        "from_address": "0xseller",\n        "to_address": "0xbuyer",\n        "token_amount": "1",\n        "type": "0x3::token::TransferEvent",\n        "transaction_timestamp": "2024-01-15T10:30:00",\n        "entry_function_id_str": "0x3::token_transfers::transfer",\n        "property_version_v1": "0",\n        "is_fungible_v2": false,\n        "token_standard": "v2"\n      }\n    ]\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Track NFT provenance through ",(0,i.jsx)(e.code,{children:"from_address"})," and ",(0,i.jsx)(e.code,{children:"to_address"})]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"type"})," to identify mints, transfers, and burns"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"entry_function_id_str"})," shows which smart contract function was called"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Get NFT Token Data"})}),(0,i.jsx)(e.p,{children:"Retrieve detailed metadata for a specific NFT."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query GetNFTTokenData($token_id: String!) {\n  current_token_datas_v2(\n    where: { token_data_id: { _eq: $token_id }}\n  ) {\n    token_data_id           # Unique token identifier\n    collection_id          # Collection this NFT belongs to\n    token_name            # Name of the NFT\n    description           # NFT description\n    token_uri            # Metadata URI\n    maximum              # Maximum supply\n    supply               # Current supply\n    token_properties     # On-chain properties\n    token_standard       # Token standard (v1 or v2)\n    is_fungible_v2       # Whether token is fungible\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "token_id": "0xtoken123"\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Sample Response:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "data": {\n    "current_token_datas_v2": [\n      {\n        "token_data_id": "0xtoken123",\n        "collection_id": "0xcollection123",\n        "token_name": "Cedra Punk #42",\n        "description": "A unique Cedra Punk NFT",\n        "token_uri": "https://metadata.cedrapunks.com/42",\n        "maximum": "1",\n        "supply": "1",\n        "token_properties": {},\n        "token_standard": "v2",\n        "is_fungible_v2": false,\n        "largest_property_version_v1": "0",\n        "last_transaction_timestamp": "2024-01-15T10:30:00",\n        "last_transaction_version": "999999999"\n      }\n    ]\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"token_uri"})," to fetch off-chain metadata (images, attributes)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"maximum"})," vs ",(0,i.jsx)(e.code,{children:"supply"}),": maximum is the cap, supply is current circulation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"token_properties"})," contains on-chain attributes"]}),"\n"]})]}),"\n",(0,i.jsx)(e.h2,{id:"-building-analytics",children:"\ud83d\udcca Building Analytics?"}),"\n",(0,i.jsx)(e.p,{children:"Aggregation queries for dashboards and data analysis tools."}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Transaction Volume Metrics"})}),(0,i.jsx)(e.p,{children:"Calculate transaction and event counts over time periods."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query GetVolumeMetrics($start_time: timestamp!, $end_time: timestamp!) {\n  # NFT activity volume\n  token_activities_v2_aggregate(\n    where: {\n      transaction_timestamp: {\n        _gte: $start_time\n        _lte: $end_time\n      }\n    }\n  ) {\n    aggregate {\n      count             # Total NFT activities\n    }\n  }\n\n  # Fungible asset activity\n  fungible_asset_activities_aggregate(\n    where: {\n      transaction_timestamp: {\n        _gte: $start_time\n        _lte: $end_time\n      }\n    }\n  ) {\n    aggregate {\n      count            # Total token transfers\n    }\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables for last month:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "start_time": "2024-12-15T00:00:00",\n  "end_time": "2025-01-15T23:59:59"\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Calculate date ranges in your application code"}),"\n",(0,i.jsx)(e.li,{children:"Use ISO 8601 format for timestamps"}),"\n",(0,i.jsx)(e.li,{children:"All timestamps are in UTC"}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Active Addresses Count"})}),(0,i.jsx)(e.p,{children:"Get unique addresses that had activity in a time period."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query GetActiveAddresses($start_time: timestamp!, $end_time: timestamp!) {\n  # Get unique addresses from token activities\n  token_activities_v2(\n    where: {\n      transaction_timestamp: {\n        _gte: $start_time\n        _lte: $end_time\n      }\n    }\n    distinct_on: from_address\n    order_by: { from_address: asc }\n    limit: 1000\n  ) {\n    from_address\n  }\n\n  # Count total activities\n  token_activities_v2_aggregate(\n    where: {\n      transaction_timestamp: {\n        _gte: $start_time\n        _lte: $end_time\n      }\n    }\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "start_time": "2024-12-15T00:00:00",\n  "end_time": "2025-01-15T23:59:59"\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"The distinct_on gives you unique addresses (up to 1000)"}),"\n",(0,i.jsx)(e.li,{children:"Use the aggregate count to see total event volume"}),"\n",(0,i.jsx)(e.li,{children:"For true unique count, process the results in your application"}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Transaction Analytics"})}),(0,i.jsx)(e.p,{children:"Analyze blockchain transaction patterns and activity."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query GetTransactionAnalytics($start_time: timestamp!, $end_time: timestamp!) {\n  # Token activity statistics\n  token_activities_v2_aggregate(\n    where: {\n      transaction_timestamp: {\n        _gte: $start_time\n        _lte: $end_time\n      }\n    }\n  ) {\n    aggregate {\n      count                    # Total activities\n      max {\n        transaction_version    # Latest transaction\n      }\n      min {\n        transaction_version    # Earliest transaction\n      }\n    }\n  }\n\n  # Most active token types\n  token_activities_v2(\n    where: {\n      transaction_timestamp: {\n        _gte: $start_time\n        _lte: $end_time\n      }\n    }\n    distinct_on: type\n    limit: 10\n  ) {\n    type\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "start_time": "2024-12-15T00:00:00",\n  "end_time": "2025-01-15T23:59:59"\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Transaction version range shows blockchain activity span"}),"\n",(0,i.jsx)(e.li,{children:"Event types help identify most common operations"}),"\n",(0,i.jsx)(e.li,{children:"Use for monitoring blockchain health and activity patterns"}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Token Distribution"})}),(0,i.jsx)(e.p,{children:"Get top holders and analyze token distribution."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:'query GetTokenDistribution($asset_type: String!, $limit: Int!) {\n  # Top holders\n  current_fungible_asset_balances_new(\n    where: {\n      asset_type: { _eq: $asset_type }\n      amount: { _gt: "0" }\n    }\n    order_by: { amount: desc }\n    limit: $limit\n  ) {\n    owner_address\n    amount\n  }\n\n  # Total supply and holder count\n  current_fungible_asset_balances_new_aggregate(\n    where: {\n      asset_type: { _eq: $asset_type }\n    }\n  ) {\n    aggregate {\n      sum {\n        amount      # Total supply\n      }\n      count        # Number of holders\n    }\n  }\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "asset_type": "0x1::cedra_coin::CedraCoin",\n  "limit": 100\n}\n'})})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Recent Activity Timeline"})}),(0,i.jsx)(e.p,{children:"Get recent blockchain activity for timeline visualization."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query GetRecentActivity($start_time: timestamp!, $limit: Int!) {\n  # Recent token activities\n  token_activities_v2(\n    where: {\n      transaction_timestamp: { _gte: $start_time }\n    }\n    order_by: { transaction_timestamp: desc }\n    limit: $limit\n  ) {\n    transaction_timestamp\n    transaction_version\n    type\n    from_address\n    to_address\n    token_amount\n  }\n\n  # Activity summary\n  token_activities_v2_aggregate(\n    where: {\n      transaction_timestamp: { _gte: $start_time }\n    }\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Variables for last 7 days:"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "start_time": "2025-01-08T00:00:00",\n  "limit": 100\n}\n'})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Usage Tips:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Group by day/hour in your application for timeline charts"}),"\n",(0,i.jsx)(e.li,{children:"Use type field to categorize different activities"}),"\n",(0,i.jsx)(e.li,{children:"Adjust limit based on your UI needs"}),"\n"]})]}),"\n",(0,i.jsx)(e.h2,{id:"-query-patterns",children:"\ud83d\udd27 Query Patterns"}),"\n",(0,i.jsx)(e.p,{children:"Common patterns that apply across all use cases."}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Pagination"})}),(0,i.jsx)(e.p,{children:"Handle large result sets with offset-based pagination."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query PaginatedQuery($limit: Int!, $offset: Int!) {\n  account_transactions(\n    limit: $limit        # Results per page\n    offset: $offset      # Skip N results\n    order_by: { transaction_version: desc }\n  ) {\n    transaction_version\n    # ... other fields\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Pagination Examples:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Page 1: ",(0,i.jsx)(e.code,{children:"limit: 20, offset: 0"})]}),"\n",(0,i.jsxs)(e.li,{children:["Page 2: ",(0,i.jsx)(e.code,{children:"limit: 20, offset: 20"})]}),"\n",(0,i.jsxs)(e.li,{children:["Page 3: ",(0,i.jsx)(e.code,{children:"limit: 20, offset: 40"})]}),"\n"]}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Cursor-based pagination (more efficient):"})}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query CursorPagination($cursor: bigint!, $limit: Int!) {\n  account_transactions(\n    where: { \n      transaction_version: { _gt: $cursor }\n    }\n    order_by: { transaction_version: asc }\n    limit: $limit\n  ) {\n    transaction_version\n    # ... other fields\n  }\n}\n"})})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Batch Multiple Queries"})}),(0,i.jsx)(e.p,{children:"Combine multiple queries in a single request."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:"query BatchedQueries($address: String!) {\n  # Alias each query\n  balances: current_fungible_asset_balances(\n    where: { owner_address: { _eq: $address }}\n  ) {\n    asset_type\n    amount\n  }\n  \n  nfts: current_token_ownerships_v2(\n    where: { owner_address: { _eq: $address }}\n    limit: 10\n  ) {\n    token_data_id\n    amount\n  }\n  \n  recent_txs: account_transactions(\n    where: { account_address: { _eq: $address }}\n    order_by: { transaction_version: desc }\n    limit: 5\n  ) {\n    transaction_version\n    success\n  }\n  \n  # Can also include aggregates\n  stats: account_transactions_aggregate(\n    where: { account_address: { _eq: $address }}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n"})}),(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Benefits:"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Single network request"}),"\n",(0,i.jsx)(e.li,{children:"Atomic data fetching"}),"\n",(0,i.jsx)(e.li,{children:"Better performance"}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("b",{children:"Filtering Patterns"})}),(0,i.jsx)(e.p,{children:"Common filtering techniques for queries."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:'# Combining conditions with AND\nwhere: {\n  _and: [\n    { amount: { _gt: "0" }},\n    { asset_type: { _eq: "0x1::cedra_coin::CedraCoin" }}\n  ]\n}\n\n# Combining conditions with OR\nwhere: {\n  _or: [\n    { owner_address: { _eq: "0x1" }},\n    { to_address: { _eq: "0x1" }}\n  ]\n}\n\n# Pattern matching with LIKE\nwhere: {\n  type: { _like: "%TransferEvent%" }\n}\n\n# Case-insensitive matching\nwhere: {\n  token_name: { _ilike: "%dragon%" }\n}\n\n# IN operator for multiple values\nwhere: {\n  asset_type: { \n    _in: [\n      "0x1::cedra_coin::CedraCoin",\n      "0x1::usdc::USDC"\n    ]\n  }\n}\n\n# NOT IN operator\nwhere: {\n  status: { _nin: ["failed", "pending"] }\n}\n'})})]}),"\n",(0,i.jsx)(e.h2,{id:"-query-operators",children:"\ud83d\udd0d Query Operators"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Your toolkit for filtering data like a pro."})," These operators go in your ",(0,i.jsx)(e.code,{children:"where"})," clauses to find exactly what you need. Mix and match them to build powerful filters."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Quick example:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-graphql",children:'where: {\n  amount: { _gt: "0" },              # Greater than 0\n  owner_address: { _eq: $address },  # Exact match\n  type: { _like: "%Transfer%" }      # Pattern match\n}\n'})}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Operator"}),(0,i.jsx)(e.th,{children:"Description"}),(0,i.jsx)(e.th,{children:"Example"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_eq"})}),(0,i.jsx)(e.td,{children:"Equal to"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:'{ amount: { _eq: "1000" }}'})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_neq"})}),(0,i.jsx)(e.td,{children:"Not equal to"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"{ success: { _neq: false }}"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_gt"})}),(0,i.jsx)(e.td,{children:"Greater than"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:'{ amount: { _gt: "0" }}'})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_gte"})}),(0,i.jsx)(e.td,{children:"Greater than or equal"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"{ version: { _gte: 1000 }}"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_lt"})}),(0,i.jsx)(e.td,{children:"Less than"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"{ gas: { _lt: 1000 }}"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_lte"})}),(0,i.jsx)(e.td,{children:"Less than or equal"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"{ number: { _lte: 100 }}"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_in"})}),(0,i.jsx)(e.td,{children:"In array"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:'{ type: { _in: ["0x1::coin"] }}'})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_nin"})}),(0,i.jsx)(e.td,{children:"Not in array"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:'{ status: { _nin: ["failed"] }}'})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_like"})}),(0,i.jsx)(e.td,{children:"Pattern match"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:'{ name: { _like: "%Token%" }}'})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"_ilike"})}),(0,i.jsx)(e.td,{children:"Case-insensitive match"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:'{ name: { _ilike: "%token%" }}'})})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"-pro-tips-from-the-trenches",children:"\ud83d\udca1 Pro Tips from the Trenches"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Don't be greedy with fields"})," - Fetching ",(0,i.jsx)(e.code,{children:"token_name"})," when you only need ",(0,i.jsx)(e.code,{children:"token_id"}),"? That's extra bytes you don't need"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Start small, scale up"})," - Test with ",(0,i.jsx)(e.code,{children:"limit: 10"})," before you go wild with ",(0,i.jsx)(e.code,{children:"limit: 1000"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Indexes are your friend"})," - Filter on indexed columns like ",(0,i.jsx)(e.code,{children:"owner_address"})," and ",(0,i.jsx)(e.code,{children:"transaction_version"})," for speed"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Aggregates can bite"})," - That innocent ",(0,i.jsx)(e.code,{children:"count"})," on millions of rows? Yeah, it'll timeout. Consider caching"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Static = cacheable"})," - NFT metadata rarely changes. Cache it and save your rate limits"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Batch like a boss"})," - One request with 5 queries beats 5 separate requests every time"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"distinct = danger"})," - On large tables, ",(0,i.jsx)(e.code,{children:"distinct"})," queries crawl. Have a backup plan"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"-keep-exploring",children:"\ud83d\udcda Keep Exploring"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Ready to dive deeper?"})," Here's where to go next:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\ud83c\udfae ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"https://cloud.hasura.io/public/graphiql?endpoint=https://graphql.cedra.dev/v1/graphql",children:"Interactive Playground"})})," - Test these queries live (no setup needed!)"]}),"\n",(0,i.jsxs)(e.li,{children:["\ud83d\ude80 ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"/indexer/sdk",children:"SDK Integration Guide"})})," - Add these queries to your TypeScript/JavaScript app"]}),"\n",(0,i.jsxs)(e.li,{children:["\ud83d\udcbb ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"/indexer/local-setup",children:"Run Your Own Indexer"})})," - Set up a local instance for development"]}),"\n",(0,i.jsxs)(e.li,{children:["\ud83d\udce1 ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"/indexer/transaction-stream",children:"Real-time Updates"})})," - Stream blockchain data as it happens"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Building something specific?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\ud83c\udfaf ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"/guides/first-nft",children:"First NFT Collection"})})," - Launch your NFT project"]}),"\n",(0,i.jsxs)(e.li,{children:["\ud83d\udcb0 ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"/guides/first-fa",children:"Create Fungible Assets"})})," - Build your own token"]}),"\n",(0,i.jsxs)(e.li,{children:["\ud83d\udd04 ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"/guides/dex",children:"DEX Integration"})})," - Add swap functionality"]}),"\n",(0,i.jsxs)(e.li,{children:["\ud83c\udfd7\ufe0f ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"/move",children:"Move Smart Contracts"})})," - Write on-chain logic"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function a(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);