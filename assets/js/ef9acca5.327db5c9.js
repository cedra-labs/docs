"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[5112],{6805:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"sdks/typescript/accounts","title":"Account Management","description":"Learn how Cedra accounts work and how to manage them effectively using the TypeScript SDK.","source":"@site/docs/sdks/typescript/accounts.mdx","sourceDirName":"sdks/typescript","slug":"/sdks/typescript/accounts","permalink":"/sdks/typescript/accounts","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/sdks/typescript/accounts.mdx","tags":[],"version":"current","frontMatter":{"title":"Account Management","sidebar_label":"Accounts"},"sidebar":"docs","previous":{"title":"TypeScript SDK","permalink":"/sdks/typescript-sdk"},"next":{"title":"Transactions","permalink":"/sdks/typescript/transactions"}}');var s=t(4848),r=t(8453);const o={title:"Account Management",sidebar_label:"Accounts"},a="\ud83d\udd11 Account Management",i={},d=[{value:"What&#39;s in an Account?",id:"whats-in-an-account",level:3},{value:"\ud83c\udd95 Creating Your First Account",id:"-creating-your-first-account",level:3},{value:"\ud83d\udce5 Importing Existing Accounts",id:"-importing-existing-accounts",level:3},{value:"\ud83d\udcb0 Checking Balances",id:"-checking-balances",level:3},{value:"Querying Account Data",id:"querying-account-data",level:3},{value:"\ud83d\ude80 Next Steps",id:"-next-steps",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-account-management",children:"\ud83d\udd11 Account Management"})}),"\n",(0,s.jsx)(n.p,{children:"Learn how Cedra accounts work and how to manage them effectively using the TypeScript SDK."}),"\n",(0,s.jsx)(n.admonition,{title:"Navigation",type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udccd You are here:"})," Account Management\n",(0,s.jsx)(n.strong,{children:"\u2b05\ufe0f Previous:"})," ",(0,s.jsx)(n.a,{href:"/sdks/typescript-sdk",children:"TypeScript SDK Overview"}),"\n",(0,s.jsx)(n.strong,{children:"\u27a1\ufe0f Next:"})," ",(0,s.jsx)(n.a,{href:"/sdks/typescript/transactions",children:"Transaction Guide"})]})}),"\n",(0,s.jsx)(n.h3,{id:"whats-in-an-account",children:"What's in an Account?"}),"\n",(0,s.jsx)(n.p,{children:"Every Cedra account on-chain contains:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sequence Number"}),": Current transaction count (like nonce in Ethereum)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication Key"}),": Used to verify transaction signatures"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Resources"}),": Data owned by the account (tokens, NFTs, etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modules"}),": Smart contracts deployed by this account"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Unlike Ethereum where accounts exist as soon as you generate a keypair, Cedra uses a ",(0,s.jsx)(n.strong,{children:"lazy initialization"})," model:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Aspect"}),(0,s.jsx)(n.th,{children:"Ethereum (EVM)"}),(0,s.jsx)(n.th,{children:"Cedra"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Account Creation"})}),(0,s.jsx)(n.td,{children:"Exists immediately"}),(0,s.jsx)(n.td,{children:"Created on first transaction"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Address Format"})}),(0,s.jsx)(n.td,{children:"20 bytes (0x...)"}),(0,s.jsx)(n.td,{children:"32 bytes (0x...)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Balance Before Funding"})}),(0,s.jsx)(n.td,{children:"Can be queried (returns 0)"}),(0,s.jsx)(n.td,{children:"Account doesn't exist"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Gas Payment"})}),(0,s.jsx)(n.td,{children:"Only in ETH"}),(0,s.jsx)(n.td,{children:"Multiple tokens supported"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"State Storage"})}),(0,s.jsx)(n.td,{children:"Global state tree"}),(0,s.jsx)(n.td,{children:"Resources owned by account"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Off-chain vs On-chain"}),": When you generate an account, it only exists in your local environment. The account is created on-chain when it receives its first transaction or tokens."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Resources"}),': Unlike EVM\'s global state, Cedra accounts own their data as "resources". Think of resources as objects that belong to specific accounts - like having a personal vault instead of entries in a shared ledger.']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Sequence Numbers"}),": Similar to Ethereum's nonce, but strictly sequential. Each transaction from an account must have the next sequence number."]}),"\n",(0,s.jsx)(n.h3,{id:"-creating-your-first-account",children:"\ud83c\udd95 Creating Your First Account"}),"\n",(0,s.jsx)(n.p,{children:"Generating a new account is straightforward. Remember, this only creates the account locally - it won't exist on-chain until it receives tokens or sends a transaction."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Account } from "@cedra-labs/ts-sdk";\n\n// Generate a new Ed25519 account (Cedra\'s default signature scheme)\nconst account = Account.generate();\n\n// The account now has:\n// - A unique address (32 bytes)\n// - A public/private keypair\n// - But does NOT exist on-chain yet\n\nconsole.log("Address:", account.accountAddress.toString());\nconsole.log("Public Key:", account.publicKey.toString());\n\n// Save the private key securely - you\'ll need it to import the account later\nconst privateKeyHex = account.privateKey.toString();\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Security First",type:"warning",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Never expose private keys in production code!"})," Use environment variables or secure key management services. The private key is shown here for educational purposes only."]})}),"\n",(0,s.jsx)(n.h3,{id:"-importing-existing-accounts",children:"\ud83d\udce5 Importing Existing Accounts"}),"\n",(0,s.jsx)(n.p,{children:"If you've previously created an account, you can import it using the private key:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Account, Ed25519PrivateKey } from "@cedra-labs/ts-sdk";\n\n// Your saved private key (64 hex characters)\nconst PRIVATE_KEY = process.env.CEDRA_PRIVATE_KEY;\n\n// Recreate the account from the private key\nconst privateKey = new Ed25519PrivateKey(PRIVATE_KEY);\nconst account = Account.fromPrivateKey({ privateKey });\n\n// The address and public key are derived from the private key\nconsole.log("Restored address:", account.accountAddress.toString());\n'})}),"\n",(0,s.jsx)(n.h3,{id:"-checking-balances",children:"\ud83d\udcb0 Checking Balances"}),"\n",(0,s.jsx)(n.p,{children:"Here's how to check various token balances for an account:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Cedra, CedraConfig, Network } from "@cedra-labs/ts-sdk";\n\nconst client = new Cedra(new CedraConfig({ network: Network.TESTNET }));\n\n// Check if account exists on-chain first\ntry {\n  // Get CED balance\n  const cedBalance = await client.getAccountCoinAmount({\n    accountAddress: account.accountAddress,\n    coinType: "0x1::cedra_coin::CedraCoin",\n  });\n\n  console.log(`CED Balance: ${cedBalance / 100_000_000} CED`);\n\n  // Check a custom token (if you have any)\n  const customBalance = await client.getAccountCoinAmount({\n    accountAddress: account.accountAddress,\n    coinType: "0x123::usdc::USDC", // Example custom token\n  });\n\n  // Get all token balances at once\n  const allCoins = await client.getAccountCoinsData({\n    accountAddress: account.accountAddress,\n  });\n\n  console.log("All tokens:");\n  allCoins.forEach(coin => {\n    console.log(`- ${coin.asset_type}: ${coin.amount}`);\n  });\n\n} catch (error) {\n  console.log("Account doesn\'t exist on-chain yet");\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"CoinStore Resources",type:"tip",children:(0,s.jsxs)(n.p,{children:["Each token type requires a ",(0,s.jsx)(n.code,{children:"CoinStore"})," resource in the account. This is automatically created when the account first receives that token type."]})}),"\n",(0,s.jsx)(n.h3,{id:"querying-account-data",children:"Querying Account Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Get comprehensive account information\nconst accountInfo = await client.getAccountInfo({\n  accountAddress: account.accountAddress,\n});\n\nconsole.log("Sequence Number:", accountInfo.sequence_number);\nconsole.log("Auth Key:", accountInfo.authentication_key);\n\n// Get all resources (tokens, NFTs, and other data)\nconst resources = await client.getAccountResources({\n  accountAddress: account.accountAddress,\n});\n\nconsole.log(`Account owns ${resources.length} resource types`);\n\n// Check if account has deployed any smart contracts\nconst modules = await client.getAccountModules({\n  accountAddress: account.accountAddress,\n});\n\nif (modules.length > 0) {\n  console.log("Deployed contracts:", modules.map(m => m.abi.name));\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Resources are the key difference from EVM: instead of a global state where contracts track balances, each Cedra account directly owns its resources. This makes the ownership model clearer and more secure."}),"\n",(0,s.jsx)(n.h2,{id:"-next-steps",children:"\ud83d\ude80 Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Ready to use your accounts? Continue with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/sdks/typescript/transactions",children:"Transaction Guide"})})," - Learn to send transactions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/sdks/typescript/examples",children:"Examples & Patterns"})})," - Real-world implementations"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var c=t(6540);const s={},r=c.createContext(s);function o(e){const n=c.useContext(r);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),c.createElement(r.Provider,{value:n},e.children)}}}]);