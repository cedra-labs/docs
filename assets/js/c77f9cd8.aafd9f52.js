"use strict";(self.webpackChunkcedra_docs=self.webpackChunkcedra_docs||[]).push([[8678],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var i=s(6540);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},9678:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"cli/usage","title":"CLI Usage","description":"Before using the Cedra CLI, ensure you have:","source":"@site/docs/cli/usage.md","sourceDirName":"cli","slug":"/cli/usage","permalink":"/cli/usage","draft":false,"unlisted":false,"editUrl":"https://github.com/cedra-labs/docs/edit/main/docs/cli/usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Error Handling","permalink":"/move/errors"},"next":{"title":"Glossary","permalink":"/glossary"}}');var t=s(4848),a=s(8453);const o={},r="CLI Usage",c={},l=[{value:"\ud83d\udcd6 Overview",id:"-overview",level:2},{value:"\u26a1 Ready to start!",id:"-ready-to-start",level:2},{value:"1. Initial Configuration:",id:"1-initial-configuration",level:2},{value:"2. Account Management",id:"2-account-management",level:2},{value:"\ud83c\udd95 Create a New Account",id:"-create-a-new-account",level:3},{value:"\ud83d\udcca Viewing Account Information",id:"-viewing-account-information",level:3},{value:"\ud83d\udcb8 Transferring Tokens Between Accounts",id:"-transferring-tokens-between-accounts",level:3},{value:"3. Key Management (Generate &amp; Recover Keys)",id:"3-key-management-generate--recover-keys",level:2},{value:"\ud83c\udfb2 Generating New Keys",id:"-generating-new-keys",level:3},{value:"\ud83d\udd04 Recovering Accounts with Existing Keys",id:"-recovering-accounts-with-existing-keys",level:3},{value:"4. Move Project Management (Init, Compile, Test, Publish)",id:"4-move-project-management-init-compile-test-publish",level:2},{value:"\ud83c\udfac Initializing a New Move Project",id:"-initializing-a-new-move-project",level:3},{value:"\ud83d\udd28 Compiling Move Code",id:"-compiling-move-code",level:3},{value:"\ud83e\uddea Running Move Unit Tests",id:"-running-move-unit-tests",level:3},{value:"\ud83d\ude80 Publishing Move Modules to the Blockchain",id:"-publishing-move-modules-to-the-blockchain",level:3},{value:"5. Transaction Simulation and Execution",id:"5-transaction-simulation-and-execution",level:2},{value:"\ud83c\udfe0 Local Simulation Mode",id:"-local-simulation-mode",level:3},{value:"\ud83c\udfac Executing (Submitting) Transactions",id:"-executing-submitting-transactions",level:3},{value:"\ud83c\udfaf Example \u2013 Running a Move Function",id:"-example--running-a-move-function",level:3},{value:"6. Viewing Resources and Events",id:"6-viewing-resources-and-events",level:2},{value:"\ud83d\udccb Listing Account Resources",id:"-listing-account-resources",level:3},{value:"\ud83d\udd0d Querying Specific Data",id:"-querying-specific-data",level:3},{value:"7. Useful Utilities (Version Info and Gas Profiling)",id:"7-useful-utilities-version-info-and-gas-profiling",level:2},{value:"\u2139\ufe0f CLI Version and Info",id:"\u2139\ufe0f-cli-version-and-info",level:3},{value:"\u26fd Gas Profiling Utility",id:"-gas-profiling-utility",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"cli-usage",children:"CLI Usage"})}),"\n",(0,t.jsxs)(n.admonition,{title:"Prerequisites & Installation",type:"info",children:[(0,t.jsx)(n.p,{children:"Before using the Cedra CLI, ensure you have:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.a,{href:"/getting-started/libs",children:"Installed Rust and Node.js"})," - Required prerequisites"]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.a,{href:"/getting-started/cli",children:"Installed the Cedra CLI"})," - Step-by-step installation guide"]}),"\n"]}),(0,t.jsxs)(n.p,{children:["If you haven't installed the CLI yet, check our ",(0,t.jsx)(n.a,{href:"/getting-started/cli",children:"Getting Started CLI guide"})," for complete setup instructions."]})]}),"\n",(0,t.jsx)(n.h2,{id:"-overview",children:"\ud83d\udcd6 Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Cedra Command Line Interface (CLI) is a developer tool for compiling and testing Move smart contracts, managing accounts, and interacting with the Cedra blockchain. It offers a convenient way to perform on-chain operations, run a local network, and manage keys directly from your terminal. This guide provides a feature-by-feature walkthrough of Cedra CLI usage, targeted at developers (including those new to Move and Cedra). Each section below explains what a feature does, when to use it, and provides step-by-step instructions with examples."}),"\n",(0,t.jsx)(n.h2,{id:"-ready-to-start",children:"\u26a1 Ready to start!"}),"\n",(0,t.jsx)(n.p,{children:"These commands cover the typical development workflow:"}),"\n",(0,t.jsx)(n.admonition,{title:"Quick Commands",type:"tip",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"cedra init"})," to ",(0,t.jsx)(n.strong,{children:"initialize account"})," \ud83c\udfd7\ufe0f"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"cedra move init"})," when ",(0,t.jsx)(n.strong,{children:"starting a new smart contract project"})," \ud83d\udce6"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"compile"})," and ",(0,t.jsx)(n.code,{children:"test"})," frequently during development to ",(0,t.jsx)(n.strong,{children:"catch errors"})," and verify logic off-chain \ud83d\udd0d"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"cedra move publish"})," when you're ready to ",(0,t.jsx)(n.strong,{children:"deploy your module"})," to a network \ud83d\ude80"]}),"\n"]})}),"\n",(0,t.jsx)(n.p,{children:"Want to dive deeper? Welcome to information below \ud83d\udc47"}),"\n",(0,t.jsx)(n.h2,{id:"1-initial-configuration",children:"1. Initial Configuration:"}),"\n",(0,t.jsxs)(n.p,{children:["After installing, configure the CLI and create an initial account profile using ",(0,t.jsx)(n.code,{children:"cedra init"}),". This command creates a configuration file and can generate a new account for you."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Running ",(0,t.jsx)(n.code,{children:"cedra init"}),":"]})," Open a terminal in your project or working folder and run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra init\n"})}),"\n",(0,t.jsx)(n.p,{children:"You will be prompted to enter:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83c\udf10 REST URL"})," \u2013 the endpoint of the Cedra fullnode to use. If you press Enter with no input, it defaults to Cedra Testnet's URL (e.g. ",(0,t.jsx)(n.code,{children:"https://testnet.cedra.dev"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udd11 Private Key"})," \u2013 a hex literal for your account's private key. If you leave this blank, the CLI will generate a new key pair for you automatically."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For example, a new developer can accept all defaults to connect to Testnet and generate keys. The CLI then creates a fresh Cedra account on Testnet and funds it with test coins via the faucet. You'll see output similar to:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'Cedra is now set up for account 0x00f1f20...79696!  Run `cedra help` for more commands  \n{  \n  "Result": "Success"  \n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This indicates a new account was created (with a unique address). The CLI saved your config in ",(0,t.jsx)(n.code,{children:".cedra/config.yaml"}),', which includes the active profile (named "default") and a reference to your new private key.']}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Multiple Profiles",type:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Profiles:"})," Cedra CLI supports multiple profiles, which are separate configurations (useful if you manage multiple accounts or networks). You can create additional profiles by running ",(0,t.jsx)(n.code,{children:"cedra init --profile <name>"})," (e.g. ",(0,t.jsx)(n.code,{children:"cedra init --profile testProfile"}),"). This will prompt for endpoints and keys again and create a separate entry in your config file. Later, you can use ",(0,t.jsx)(n.code,{children:"--profile <name>"})," flag with most commands to switch which account or network you are targeting. If no profile is specified, the CLI uses the ",(0,t.jsx)(n.code,{children:"default"})," profile."]})}),"\n",(0,t.jsx)(n.p,{children:"After initialization, you're ready to use Cedra CLI. In the following sections, we'll walk through common tasks like managing accounts, keys, Move packages, and more."}),"\n",(0,t.jsx)(n.h2,{id:"2-account-management",children:"2. Account Management"}),"\n",(0,t.jsxs)(n.p,{children:["In Cedra, an ",(0,t.jsx)(n.strong,{children:"account"})," represents an on-chain identity with an address, public/private key pair, and associated resources. The CLI provides commands to create accounts, fund them with test tokens, check their state, and perform basic transactions. This section covers how to manage accounts using Cedra CLI."]}),"\n",(0,t.jsx)(n.h3,{id:"-create-a-new-account",children:"\ud83c\udd95 Create a New Account"}),"\n",(0,t.jsxs)(n.p,{children:["The simplest way to create a new account is via ",(0,t.jsx)(n.code,{children:"cedra init"})," (as shown above), which generates a key and registers the account on Testnet automatically. You can also generate an account without the interactive prompt by using the key tool (see ",(0,t.jsx)(n.strong,{children:"Key Management"})," below) and then fund it manually."]}),"\n",(0,t.jsx)(n.h3,{id:"-viewing-account-information",children:"\ud83d\udcca Viewing Account Information"}),"\n",(0,t.jsxs)(n.p,{children:["You can check its on-chain data using CLI queries. The ",(0,t.jsx)(n.code,{children:"cedra account list"})," command lets you view balances, resources, and other details of an account."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcb0 Check Balance:"})," Every account has a balance of the native token (for Cedra Testnet, test CED or similar). To view an account's coin balance and related information, run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra account list --query balance --account default\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will output JSON data like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "Result": [\n    {\n      "coin": {\n        "value": "110000"\n      }\n      ...\n    }\n  ]\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"value"})," field shows the account balance in the octas."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"List Resources:"})," An account can hold various Move ",(0,t.jsx)(n.strong,{children:"resources"})," (data structures defined by smart contracts). To list all resources in an account, use:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra account list --account <ADDRESS>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["or equivalently ",(0,t.jsx)(n.code,{children:"--query resources"}),". This returns all resources stored under that account in JSON format. For example, you will see the coin resource (as shown above), and any other resources the account has acquired (such as tokens, NFTs, etc.). Each resource is identified by its type (module and struct name) and contains the stored data."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"List Modules:"})," If the account has published Move modules (smart contracts), you can list them with:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra account list --query modules --account <ADDRESS>\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will output the bytecode for each module published in that account. (It's usually more useful to verify modules via source code, but this command confirms what's on-chain.)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Account Summary:"})," Simply running ",(0,t.jsx)(n.code,{children:"cedra account list"})," with no ",(0,t.jsx)(n.code,{children:"--query"})," will default to listing ",(0,t.jsx)(n.strong,{children:"resources"})," (same as ",(0,t.jsx)(n.code,{children:"--query resources"}),"). This gives a quick snapshot of an account's state."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"-transferring-tokens-between-accounts",children:"\ud83d\udcb8 Transferring Tokens Between Accounts"}),"\n",(0,t.jsxs)(n.p,{children:["Cedra CLI can act as a basic wallet to send the native coins from one account to another. The ",(0,t.jsx)(n.code,{children:"cedra account transfer"})," command facilitates this."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udce4 Send a Transfer:"})," To send funds from your current profile's account to another account, run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra account transfer --account <RECIPIENT> --amount <NUMBER>\n"})}),"\n",(0,t.jsx)(n.p,{children:'This would transfer NUMBER coins from the default profile\'s account to the account associated with the "secondary" profile. The CLI will output a JSON result of the transaction, including the gas used, balance changes for both sender and receiver, and a success indicator:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "Result": {\n    ...\n    "vm_status": "Executed successfully"\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"3-key-management-generate--recover-keys",children:"3. Key Management (Generate & Recover Keys)"}),"\n",(0,t.jsx)(n.p,{children:"Cedra CLI provides tools for generating new cryptographic keys, managing multiple keys, and importing existing keys from other wallets. This is useful for creating accounts programmatically or managing multiple development identities."}),"\n",(0,t.jsx)(n.h3,{id:"-generating-new-keys",children:"\ud83c\udfb2 Generating New Keys"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Create Keys:"})," The ",(0,t.jsx)(n.code,{children:"cedra key generate"})," command creates a new Ed25519 key pair and saves it to files:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra key generate --key-type ed25519 --output-file my-key\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This creates two files: ",(0,t.jsx)(n.code,{children:"my-key"})," (private key) and ",(0,t.jsx)(n.code,{children:"my-key.pub"})," (public key). The CLI will also print the account address that corresponds to this key:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "Result": {\n    "PrivateKey Path": "my-key",\n    "PublicKey Path": "my-key.pub"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can now use this key to initialize or import an account."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Key Security",type:"warning",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Storing Keys:"})," Keys generated with ",(0,t.jsx)(n.code,{children:"cedra key generate"})," are not automatically added to your CLI config. They are just files. You can use them by either: (a) running ",(0,t.jsx)(n.code,{children:"cedra init --private-key <path_to_key>"})," to create a profile with that key, or (b) manually editing your ",(0,t.jsx)(n.code,{children:".cedra/config.yaml"})," to reference the private key for a profile."]})}),"\n",(0,t.jsx)(n.h3,{id:"-recovering-accounts-with-existing-keys",children:"\ud83d\udd04 Recovering Accounts with Existing Keys"}),"\n",(0,t.jsx)(n.p,{children:"If you have an existing private key (from another wallet or a previous backup), you can import it into Cedra CLI to manage that account."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\ud83d\udce5 Import via Private Key:"})}),"\n",(0,t.jsxs)(n.p,{children:["The CLI ",(0,t.jsx)(n.code,{children:"init"})," command accepts a ",(0,t.jsx)(n.code,{children:"--private-key"})," argument. If you have the key as a hex string, you can run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra init --private-key <YOUR_PRIVATE_KEY_HEX>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will set up a new profile using the given key. Once imported, you can use the CLI to view the account (",(0,t.jsx)(n.code,{children:"cedra account list"}),") or execute transactions as normal. Key management commands help you handle keys safely outside the blockchain, while account commands manage on-chain entities."]}),"\n",(0,t.jsx)(n.h2,{id:"4-move-project-management-init-compile-test-publish",children:"4. Move Project Management (Init, Compile, Test, Publish)"}),"\n",(0,t.jsxs)(n.p,{children:["One of the Cedra CLI's most powerful features is helping you develop and deploy ",(0,t.jsx)(n.strong,{children:"Move"})," smart contracts. The CLI can ",(0,t.jsx)(n.strong,{children:"create"})," a new Move project, ",(0,t.jsx)(n.strong,{children:"compile"})," it, run Move ",(0,t.jsx)(n.strong,{children:"unit tests"}),", and ",(0,t.jsx)(n.strong,{children:"publish"})," your modules to the blockchain. This section walks through a typical Move development cycle using Cedra CLI."]}),"\n",(0,t.jsx)(n.h3,{id:"-initializing-a-new-move-project",children:"\ud83c\udfac Initializing a New Move Project"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra move init --name <PACKAGE_NAME>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will create a new folder (named after your package) with a ",(0,t.jsx)(n.code,{children:"Move.toml"})," file and a ",(0,t.jsx)(n.code,{children:"sources/"})," directory."]}),"\n",(0,t.jsxs)(n.p,{children:["Next, add your Move source code in the ",(0,t.jsx)(n.code,{children:"sources/"})," directory."]}),"\n",(0,t.jsx)(n.h3,{id:"-compiling-move-code",children:"\ud83d\udd28 Compiling Move Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra move compile\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Make sure you execute this inside the project directory (where ",(0,t.jsx)(n.code,{children:"Move.toml"})," is located). The CLI will compile your Move modules and any dependencies. If successful, it will produce compiled bytecode in a ",(0,t.jsx)(n.code,{children:"build/"})," directory, and list the module IDs (addresses and names) that were compiled. If there are errors, the compiler will display them with file and line numbers so you can fix your code."]}),"\n",(0,t.jsx)(n.admonition,{title:"Clean Build",type:"tip",children:(0,t.jsxs)(n.p,{children:["If you want to clear the compiled artifacts, you can run ",(0,t.jsx)(n.code,{children:"cedra move clean"}),". This deletes the ",(0,t.jsx)(n.code,{children:"build"})," directory. It's not required but helps ensure you're starting fresh."]})}),"\n",(0,t.jsx)(n.h3,{id:"-running-move-unit-tests",children:"\ud83e\uddea Running Move Unit Tests"}),"\n",(0,t.jsxs)(n.p,{children:["Move allows you to write unit tests within your modules (functions annotated with ",(0,t.jsx)(n.code,{children:"#[test]"}),"). To execute these tests with the CLI, run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra move test\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will compile the package (in test mode) and run all tests in your code. Output will show which tests passed or failed, along with any debug prints or assertions from the tests. Use this to verify your module's logic off-chain before deploying."}),"\n",(0,t.jsx)(n.h3,{id:"-publishing-move-modules-to-the-blockchain",children:"\ud83d\ude80 Publishing Move Modules to the Blockchain"}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udce4 Publish the Package:"})," Run the ",(0,t.jsx)(n.code,{children:"cedra move publish"})," command (with ",(0,t.jsx)(n.code,{children:"--named-addresses"})," as needed). The CLI will first ",(0,t.jsx)(n.strong,{children:"simulate"})," the publish transaction (see next section on simulation) and then ask for confirmation to actually submit it. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra move publish --named-addresses my_first_module=default\n"})}),"\n",(0,t.jsxs)(n.p,{children:["On success, you'll get a JSON output with details of the transaction, including a ",(0,t.jsx)(n.code,{children:"transaction_hash"}),", gas used, the sender, and ",(0,t.jsx)(n.code,{children:"success: true"})," if it executed."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u2705 Verify on Chain:"})," After publishing, you can use ",(0,t.jsx)(n.code,{children:"cedra account list --query modules --account <publisher>"})," to see the module in the account's modules list."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"5-transaction-simulation-and-execution",children:"5. Transaction Simulation and Execution"}),"\n",(0,t.jsxs)(n.p,{children:["Before executing any transaction on-chain, it's often useful (or even automatic) to ",(0,t.jsx)(n.strong,{children:"simulate"})," it \u2013 to ensure it will succeed and to estimate gas usage. Cedra CLI provides built-in support for simulating transactions, either on the remote network or locally, and then executing them."]}),"\n",(0,t.jsx)(n.admonition,{title:"Default Behavior",type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udd0d Simulate then Execute:"})," By default, when you run a command like ",(0,t.jsx)(n.code,{children:"cedra move publish"})," or ",(0,t.jsx)(n.code,{children:"cedra move run"})," (to execute a Move function), the CLI will first submit the transaction as a ",(0,t.jsx)(n.strong,{children:"simulation"})," to the network's REST API. This means the transaction is run against the current blockchain state ",(0,t.jsx)(n.em,{children:"without actually committing it"}),", so you can see if it would succeed and how much gas it would use. If the simulation passes (no aborts or errors), the CLI will prompt you to confirm execution. This protects developers from accidentally sending failing transactions. ",(0,t.jsx)(n.em,{children:'(In technical terms, the CLI "simulation" uses the Cedra fullnode\'s simulation endpoint under the hood.)'})]})}),"\n",(0,t.jsx)(n.p,{children:"For example, if you run a Move script call:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'cedra move run --function-id default::message::set_message --args string:"Hello, Cedra!"\n'})}),"\n",(0,t.jsx)(n.p,{children:'the CLI will simulate this call on the specified network. You might see output indicating a simulation succeeded and a prompt like "Submit transaction (yes/no)?"". After you type "yes", the transaction is submitted to be executed (committed) on chain.'}),"\n",(0,t.jsx)(n.h3,{id:"-local-simulation-mode",children:"\ud83c\udfe0 Local Simulation Mode"}),"\n",(0,t.jsxs)(n.p,{children:["Cedra CLI can also simulate transactions entirely ",(0,t.jsx)(n.strong,{children:"locally"})," (without contacting a node). This is useful for rapid feedback or offline analysis. To do this, append the ",(0,t.jsx)(n.code,{children:"--local"})," flag to your command. For instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'cedra move run --function-id default::message::set_message --args string:"Test" --local\n'})}),"\n",(0,t.jsx)(n.h3,{id:"-executing-submitting-transactions",children:"\ud83c\udfac Executing (Submitting) Transactions"}),"\n",(0,t.jsxs)(n.p,{children:["After simulation, when you confirm, the CLI submits the transaction to the network for execution. If you prefer to skip the interactive confirmation , you can add the ",(0,t.jsx)(n.code,{children:"--assume-yes"}),' flag to any command that prompts. This tells the CLI to proceed without asking, essentially assuming you typed "yes" to all confirmations.']}),"\n",(0,t.jsx)(n.h3,{id:"-example--running-a-move-function",children:"\ud83c\udfaf Example \u2013 Running a Move Function"}),"\n",(0,t.jsxs)(n.p,{children:["Suppose you published the ",(0,t.jsx)(n.code,{children:"message::set_message"}),". To call this function on Testnet via CLI:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'cedra move run --function-id <your_address>::message::set_message --args string:"Hello!"\n'})}),"\n",(0,t.jsx)(n.p,{children:"The CLI will:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"\ud83d\udd0d Simulate the call on the Testnet node (by default)."}),"\n",(0,t.jsx)(n.li,{children:"\ud83d\udcca Show you the result (e.g., success and gas cost)."}),"\n",(0,t.jsx)(n.li,{children:"\u2753 Prompt for confirmation. If you continue, it will send the transaction for execution."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["After execution, you'll get a JSON result similar to other transactions (",(0,t.jsx)(n.code,{children:"gas_used"}),", ",(0,t.jsx)(n.code,{children:"success"}),", etc.). You can then query the account's resources to see the effect (e.g., the ",(0,t.jsx)(n.code,{children:"MessageHolder"})," resource now stored under that account)."]}),"\n",(0,t.jsx)(n.admonition,{title:"Best Practice",type:"tip",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"When to Use Simulation:"})," Always! It's good practice to let the CLI simulate transactions first \u2013 this way you avoid wasting gas on mistakes. The simulation results give you a chance to inspect what will happen. For complex or state-changing operations, consider using ",(0,t.jsx)(n.code,{children:"--local"})," simulation to test different scenarios offline. Use ",(0,t.jsx)(n.code,{children:"--benchmark"})," and ",(0,t.jsx)(n.code,{children:"--profile-gas"})," during development to improve your code (for example, to ensure your transaction stays within desired gas limits or to identify which parts of your code are costly)."]})}),"\n",(0,t.jsx)(n.h2,{id:"6-viewing-resources-and-events",children:"6. Viewing Resources and Events"}),"\n",(0,t.jsxs)(n.p,{children:["Blockchain applications revolve around ",(0,t.jsx)(n.strong,{children:"resources"})," (Move's persistent data) and ",(0,t.jsx)(n.strong,{children:"events"})," (emitted records of actions). Cedra CLI provides commands to inspect these on-chain, primarily through the ",(0,t.jsx)(n.code,{children:"account"})," subcommands."]}),"\n",(0,t.jsx)(n.h3,{id:"-listing-account-resources",children:"\ud83d\udccb Listing Account Resources"}),"\n",(0,t.jsxs)(n.p,{children:["As described, ",(0,t.jsx)(n.code,{children:"cedra account list --account <addr>"})," will show all Move resources in the account. This is the primary way to view on-chain state for that account. Each resource is output as a JSON object with its fields. For example, a coin resource might look like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "coin": { "value": "1000" },\n  ...\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Use this command whenever you need to inspect the outcome of transactions. For instance, after calling a ",(0,t.jsx)(n.code,{children:"set_message"})," function, you could run ",(0,t.jsx)(n.code,{children:"cedra account list --account default"})," (if default is the affected account) to see the ",(0,t.jsx)(n.code,{children:"MessageHolder"})," resource now exists and contains the message you stored."]}),"\n",(0,t.jsx)(n.h3,{id:"-querying-specific-data",children:"\ud83d\udd0d Querying Specific Data"}),"\n",(0,t.jsxs)(n.p,{children:["The CLI's ",(0,t.jsx)(n.code,{children:"--query"})," flag can narrow down what you see:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--query resources"})," (default) shows all resources."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--query balance"})," shows just the coin balance resource with its event handles."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--query modules"})," lists the account's modules (bytecode)."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If you only care about balances and coin events, use the ",(0,t.jsx)(n.code,{children:"balance"})," query. If you want the full state dump, use ",(0,t.jsx)(n.code,{children:"resources"}),". This can be useful for debugging state differences, especially in testing scenarios."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Summary",type:"note",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcca Summary:"})," Use Cedra CLI to get a quick snapshot of account state and ensure your transactions did what you expected:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["After any state-changing transaction (publish, coin transfer, resource modification), run ",(0,t.jsx)(n.code,{children:"cedra account list"})," on the affected account to see new resource values."]}),"\n",(0,t.jsx)(n.li,{children:"Use the queries to focus on balances or confirm modules."}),"\n",(0,t.jsx)(n.li,{children:"For detailed event logs, consult Cedra's explorer or APIs, as CLI outputs only include event counters by default."}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"7-useful-utilities-version-info-and-gas-profiling",children:"7. Useful Utilities (Version Info and Gas Profiling)"}),"\n",(0,t.jsx)(n.p,{children:"Finally, Cedra CLI offers some utility commands that can make development easier or provide meta-information about the CLI and your transactions. Two notable ones are checking the CLI version and profiling gas usage."}),"\n",(0,t.jsx)(n.h3,{id:"\u2139\ufe0f-cli-version-and-info",children:"\u2139\ufe0f CLI Version and Info"}),"\n",(0,t.jsx)(n.p,{children:"It's important to know which version of Cedra CLI you are running, especially as Cedra evolves. You can check this in a couple ways:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cedra --version"})," \u2013 prints the version number of the CLI (for example, ",(0,t.jsx)(n.code,{children:"cedra 2.1.0"})," if using an Cedra build). This is a quick way to verify if you have the latest release."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cedra info"})," \u2013 shows detailed build information about the CLI tool. Running this outputs a JSON with fields like ",(0,t.jsx)(n.code,{children:"build_commit_hash"}),", ",(0,t.jsx)(n.code,{children:"build_time"}),", and ",(0,t.jsx)(n.code,{children:"build_pkg_version"}),". This is mostly useful for debugging or when reporting issues (so developers know exactly what build you're using)."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cedra info\n"})}),"\n",(0,t.jsx)(n.p,{children:"might output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "Result": {\n    "build_branch": "main",\n    "build_git_rev": "abc1234...",\n    "build_pkg_version": "1.0.0",\n    "build_time": "2025-01-15 12:00:00",\n    "build_os": "macos-aarch64"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"-gas-profiling-utility",children:"\u26fd Gas Profiling Utility"}),"\n",(0,t.jsx)(n.p,{children:"Gas fees are a critical aspect of blockchain transactions. Cedra CLI's gas profiler helps you understand how much gas your transactions consume and where. This is particularly helpful when optimizing smart contracts."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcc8 Profiling a Transaction's Gas:"})," To profile gas, add ",(0,t.jsx)(n.code,{children:"--profile-gas"})," to a transaction execution command. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'cedra move run --function-id default::message::set_message --args string:"Hi" --profile-gas\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When you run this, the CLI will ",(0,t.jsx)(n.strong,{children:"simulate the transaction locally with instrumentation"}),". You'll see output indicating the simulation and where the gas report was saved:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:'Simulating transaction locally using the gas profiler...\nGas report saved to gas-profiling/txn-<XYZ>-<function-name>\n{\n  "Result": { "transaction_hash": "...", "gas_used": 441, ... "success": true, ... }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[". The CLI still prints a Result (as if the transaction executed, though it was just a simulation), but crucially it generates a detailed report in a directory called ",(0,t.jsx)(n.code,{children:"gas-profiling/"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In your project folder, after running the above, look for a new folder ",(0,t.jsx)(n.code,{children:"gas-profiling/txn-<something>/"}),". Inside, you will find an ",(0,t.jsx)(n.code,{children:"index.html"})," along with an ",(0,t.jsx)(n.code,{children:"assets/"})," directory. Open ",(0,t.jsx)(n.code,{children:"index.html"})," in a web browser to view the gas report."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);